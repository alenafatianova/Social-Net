{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/DialogsReduxForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","React","memo","props","path","id","className","classes","user","to","name","maxLength100","maxLengthCreator","AddMessageForm","handleSubmit","onSubmit","Field","type","validate","required","placeholder","component","Textarea","DialogsReduxForm","reduxForm","form","Dialogs","dialogsElements","dialogsData","map","dialog","avatar","messagesElements","messageData","message","Message","addNewMessage","useCallback","values","sendMessage","newMessageTextBody","isAuth","users_dialogs","users","messages","compose","connect","state","dialogsPage","dispatch","sendMessageAC","withAuthRedirect"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,cAAgB,+BAA+B,MAAQ,uBAAuB,KAAO,sBAAsB,SAAW,4B,sJCS3HC,EAAaC,IAAMC,MAAK,SAACC,GACtC,IAAIC,EAAO,QAAUD,EAAME,GAEzB,OACE,8BACE,qBAAKC,UAAWC,IAAQC,KAAxB,SACE,cAAC,IAAD,CAASC,GAAIL,EAAb,SAAoBD,EAAMO,c,iCCN5BC,EAAeC,YAAiB,KAGzBC,EAA+DZ,IAAMC,MAAK,YAAqB,IAAnBY,EAAkB,EAAlBA,aAErF,OACI,uBAAMC,SAAUD,EAAhB,UACI,8BACA,cAACE,EAAA,EAAD,CACIC,KAAK,WACLC,SAAU,CAACC,IAAUR,GACrBS,YAAY,oBACZV,KAAK,kBACLW,UAAWC,QAEf,8BACI,kDAQHC,EAAmBC,YAA2B,CAACC,KAAM,mBAAlCD,CAAsDX,G,QChBzEa,EAAUzB,IAAMC,MAAK,SAACC,GAEjC,IAAIwB,EAAkBxB,EAAMyB,YAAYC,KAAI,SAAAC,GAAM,OAAK,cAAC9B,EAAD,CAA4BK,GAAIyB,EAAOzB,GAAIK,KAAMoB,EAAOpB,KAAMqB,OAAM,6CAAwCD,EAAOpB,KAA/C,SAAnDoB,EAAOzB,OAC3E2B,EAAmB7B,EAAM8B,YAAYJ,KAAI,SAAAK,GAAO,OAAI,cAACC,EAAD,CAA0BD,QAASA,EAAQA,QAAS7B,GAAI6B,EAAQ7B,IAAlD6B,EAAQ7B,OAExE+B,EAAgBC,uBAAY,SAACC,GACjCnC,EAAMoC,YAAYD,EAAOE,sBACxB,CAACrC,IAEJ,OAAGA,EAAMsC,OAAe,cAAC,IAAD,CAAUhC,GAAG,WAGnC,sBAAKH,UAAWC,IAAQmC,cAAxB,UACE,qBAAKpC,UAAWC,IAAQoC,MAAxB,SACGhB,IACH,sBAAKrB,UAAWC,IAAQqC,SAAxB,UACGZ,EACH,8BACA,8BACE,cAACT,EAAD,CAAkBR,SAAUqB,WAI/B,8BAMQD,EAAUlC,IAAMC,MAAK,SAACC,GACjC,OACE,8BACE,sBAAMG,UAAWC,IAAQ2B,QAAzB,SACG/B,EAAM+B,e,gBC1BAW,sBAAuBC,aAfhB,SAACC,GACrB,MAAO,CACLnB,YAAamB,EAAMC,YAAYpB,YAC/BK,YAAac,EAAMC,YAAYf,gBAIT,SAACgB,GACxB,MAAO,CACLV,YAAa,SAACC,GACZS,EAASC,YAAcV,SAKsDW,IAArEN,CAAuFnB","file":"static/js/4.79877b4f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"users_dialogs\":\"Dialogs_users_dialogs__CH9fq\",\"users\":\"Dialogs_users__2mbFo\",\"user\":\"Dialogs_user__2bJPx\",\"messages\":\"Dialogs_messages__1w_Up\"};","import React from \"react\";\nimport classes from \"./DialogItem.module.css\";\nimport { NavLink } from \"react-router-dom\";\n\ntype namePropsType = {\n    name: string\n    id: number\n    avatar: string\n  }\n\nexport const DialogItem = React.memo((props: namePropsType) => {\nlet path = \"user/\" + props.id;\n\n  return (\n    <div>\n      <div className={classes.user}>\n        <NavLink to={path}>{props.name}</NavLink>\n      </div>\n    </div>\n  );\n})\n","import React from 'react'\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\nimport { maxLengthCreator, required } from '../../redux/handlers/validators/validators'\nimport { Textarea } from '../common/FormControl/FormControls'\n\n\nexport type messageFormType = {\n    messageTextarea: string\n}\n\nconst maxLength100 = maxLengthCreator(100);\n\n\nexport const AddMessageForm: React.FC<InjectedFormProps<messageFormType>> = React.memo(({handleSubmit}) => {\n   \n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n            <Field \n                type='textarea'\n                validate={[required, maxLength100]}\n                placeholder='Type your message' \n                name='messageTextarea' \n                component={Textarea} />\n            </div>\n            <div>\n                <button>send</button>\n            </div>\n        </form>\n    )\n})\n\n\n//-------------------- This is HOC for messageReduxForm ----------------------------\nexport const DialogsReduxForm = reduxForm<messageFormType>({form: 'messageTextarea'})(AddMessageForm)","import React, { useCallback } from \"react\";\nimport classes from \"./Dialogs.module.css\";\nimport {DialogItem} from \"./DialogItem/DialogItem\"\nimport { DialogsType, MessageType,} from './../../redux/store'\nimport { DialogsReduxForm } from \"./DialogsReduxForm\";\nimport { Redirect } from \"react-router-dom\";\n\nexport type dialogDataType = {\n  dialogsData: Array<DialogsType>\n  messageData: Array<MessageType>\n  isAuth: boolean\n  sendMessage: (values: any) => void\n}\ntype UserMessagePropsType = {\n  message: string\n  id: number\n}\n\nexport const Dialogs = React.memo((props: dialogDataType) => {\n\n  let dialogsElements = props.dialogsData.map(dialog =>  <DialogItem key={dialog.id} id={dialog.id} name={dialog.name} avatar={`https://api.adorable.io/avatars/96/${dialog.name}.png`} /> ); \n  let messagesElements = props.messageData.map(message => <Message key={message.id} message={message.message} id={message.id} /> ) \n\n  const addNewMessage = useCallback((values: any) => {\n    props.sendMessage(values.newMessageTextBody)\n  }, [props])\n\n  if(props.isAuth) return <Redirect to='/login'/>\n\n  return (\n    <div className={classes.users_dialogs}>\n      <div className={classes.users}>\n        {dialogsElements}</div>\n      <div className={classes.messages}>\n        {messagesElements}\n      <div>\n      <div>\n        <DialogsReduxForm onSubmit={addNewMessage}/>\n        </div>\n        </div>\n      </div>\n     <div>  \n     </div>\n    </div>\n  );\n})\n\nexport const Message = React.memo((props: UserMessagePropsType) => {\n  return (\n    <div>\n      <span className={classes.message}>\n        {props.message}\n        </span>\n    </div>\n  );\n})","import { connect } from 'react-redux';\nimport { ComponentType} from \"react\";\nimport { DialogsActionsType, sendMessageAC } from '../../redux/dialogs-reducer'\nimport { Dialogs } from \"./Dialogs\";\nimport { StateType } from '../../redux/redux-store';\nimport { withAuthRedirect } from '../../hoc/AuthRedirect';\nimport { compose } from 'redux';\n\n\n\nlet mapStateToProps = (state: StateType) => {\n  return {\n    dialogsData: state.dialogsPage.dialogsData,\n    messageData: state.dialogsPage.messageData,\n  }\n}\n\n let mapDispatchToProps = (dispatch: (actions: DialogsActionsType)=> void) => {\n   return {\n     sendMessage: (newMessageTextBody: string) => {\n       dispatch(sendMessageAC(newMessageTextBody))\n     }\n   }\n }\n\nexport default compose<ComponentType>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs)"],"sourceRoot":""}