{"version":3,"sources":["styles/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/DialogsReduxForm.tsx","components/Dialogs/Dialogs.tsx","hoc/AuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","style","user","to","name","maxLength100","maxLengthCreator","DialogsReduxForm","reduxForm","form","handleSubmit","onSubmit","createField","Textarea","required","Message","message","mapStateToPropsRedirect","state","isAuth","auth","compose","connect","dialogsData","dialogsPage","messageData","dialogsActions","WrappedComponent","restProps","useSelector","dialogsElements","map","dialog","messagesElements","addNewMessage","useCallback","values","sendMessage","newMessageTextBody","users_dialogs","users","messages"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,cAAgB,+BAA+B,MAAQ,uBAAuB,KAAO,sBAAsB,SAAW,4B,oJCQ3HC,EAAa,SAACC,GAC3B,IAAIC,EAAO,QAAUD,EAAME,GAEzB,OACE,8BACE,qBAAKC,UAAWC,IAAMC,KAAtB,SACE,cAAC,IAAD,CAASC,GAAIL,EAAb,SAAoBD,EAAMO,Y,yBCR5BC,EAAeC,YAAiB,KAmBzBC,EAAmBC,YAA+B,CAACC,KAAM,mBAAtCD,EAfgD,SAAC,GAAoB,IAAnBE,EAAkB,EAAlBA,aAC9E,OACI,uBAAMC,SAAUD,EAAhB,UACI,8BACCE,YAAwC,oBAAqB,qBAAsBC,IAAU,CAACC,IAAUT,MAEzG,8BACI,kDCmCHU,EAAiC,SAAClB,GAC7C,OACE,8BACE,sBAAMG,UAAWC,IAAMe,QAAvB,SACGnB,EAAMmB,a,gBCpDXC,EAA0B,SAACC,GAAD,MAAuB,CACjDC,OAAQD,EAAME,KAAKD,S,YCWRE,sBACbC,aAToB,SAACJ,GACrB,MAAO,CACLK,YAAaL,EAAMM,YAAYD,YAC/BE,YAAaP,EAAMM,YAAYC,eAM1B,eAAsBC,ODHxB,SAA2BC,GAc9B,OAJqCL,YAChCL,EADgCK,EAR4C,SAACzB,GAAW,IAEpFsB,EAAwBtB,EAAxBsB,OAAWS,EAFwE,YAE3D/B,EAF2D,YAIxF,OAAKsB,EACG,cAACQ,EAAD,eAAsBC,IADR,cAAC,IAAD,CAAUzB,GAAG,gBCJ5BkB,EFIQ,SAACxB,GAEtB,IAAM0B,EAAcM,aAAY,SAACX,GAAD,OAAsBA,EAAMM,YAAYD,eAClEE,EAAcI,aAAY,SAACX,GAAD,OAAsBA,EAAMM,YAAYC,eAEpEK,EAAkBP,EAAYQ,KAAI,SAAAC,GAAM,OAAG,cAAC,EAAD,CAA4BjC,GAAIiC,EAAOjC,GAAIK,KAAM4B,EAAO5B,MAAvC4B,EAAOjC,OACnEkC,EAAmBR,EAAYM,KAAI,SAAAf,GAAO,OAAI,cAAC,EAAD,CAA0BA,QAASA,EAAQA,QAASjB,GAAIiB,EAAQjB,IAAlDiB,EAAQjB,OAElEmC,EAAgBC,uBAAY,SAACC,GACjCvC,EAAMwC,YAAYD,EAAOE,sBACxB,CAACzC,IAGJ,OACE,sBAAKG,UAAWC,IAAMsC,cAAtB,UACE,qBAAKvC,UAAWC,IAAMuC,MAAtB,SACGV,IAEH,sBAAK9B,UAAWC,IAAMwC,SAAtB,UACGR,EACH,8BACA,8BACE,cAAC1B,EAAD,CAAkBI,SAAUuB,WAI/B","file":"static/js/4.c7e35475.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"users_dialogs\":\"Dialogs_users_dialogs__C54RA\",\"users\":\"Dialogs_users__2oC9z\",\"user\":\"Dialogs_user__2kskM\",\"messages\":\"Dialogs_messages__3Neb5\"};","import React from \"react\";\nimport style from \"../../../styles/DialogItem.module.css\";\nimport { NavLink } from \"react-router-dom\";\n\ntype namePropsType = {\n    name: string\n    id: number\n  }\n\nexport const DialogItem = (props: namePropsType) => {\nlet path = \"user/\" + props.id;\n\n  return (\n    <div>\n      <div className={style.user}>\n        <NavLink to={path}>{props.name}</NavLink>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport {InjectedFormProps, reduxForm} from 'redux-form'\nimport { maxLengthCreator, required } from '../../redux/handlers/validators/validators'\nimport { createField, Textarea } from '../common/FormControl/FormControls'\nimport { NewMessageFormTypes } from './Dialogs'\n\n\nconst maxLength100 = maxLengthCreator(100);\ntype DialogsReduxFormValuesKeys = Extract<keyof NewMessageFormTypes, string>\n\n\nexport const AddMessageForm: React.FC<InjectedFormProps<NewMessageFormTypes>> = ({handleSubmit}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n            {createField<DialogsReduxFormValuesKeys>('Type your message', 'newMessageTextBody', Textarea, [required, maxLength100])}\n            </div>\n            <div>\n                <button>send</button>\n            </div>\n        </form>\n    )\n}\n\n\n//-------------------- This is HOC for messageReduxForm ----------------------------\nexport const DialogsReduxForm = reduxForm<NewMessageFormTypes>({form: 'messageTextarea'})(AddMessageForm)","import React, { useCallback } from \"react\";\nimport style from \"../../styles/Dialogs.module.css\";\nimport {DialogItem} from \"./DialogItem/DialogItem\"\nimport { DialogsReduxForm } from \"./DialogsReduxForm\";\nimport { useSelector } from \"react-redux\";\nimport { StateType } from \"../../redux/redux-store\";\n\n\n\n\nexport type dialogDataType = {\n  sendMessage: (newMessageTextBody: string) => void\n}\nexport type NewMessageFormTypes = {\n  newMessageTextBody: string\n}\ntype MessageType = {\n  message: string\n  id: number\n}\n\nexport const Dialogs = (props: dialogDataType) => {\n\n  const dialogsData = useSelector((state: StateType) => state.dialogsPage.dialogsData)\n  const messageData = useSelector((state: StateType) => state.dialogsPage.messageData)\n  \n  let dialogsElements = dialogsData.map(dialog =><DialogItem key={dialog.id} id={dialog.id} name={dialog.name}/>); \n  let messagesElements = messageData.map(message => <Message key={message.id} message={message.message} id={message.id} /> ) \n\n  const addNewMessage = useCallback((values: NewMessageFormTypes) => {\n    props.sendMessage(values.newMessageTextBody)\n  }, [props])\n \n\n  return (\n    <div className={style.users_dialogs}>\n      <div className={style.users}>\n        {dialogsElements}\n      </div>\n      <div className={style.messages}>\n        {messagesElements}\n      <div>\n      <div>\n        <DialogsReduxForm onSubmit={addNewMessage}/>\n        </div>\n        </div>\n      </div>\n     <div>  \n     </div>\n    </div>\n  )\n}\n\nexport const Message: React.FC<MessageType> = (props) => {\n  return (\n    <div>\n      <span className={style.message}>\n        {props.message}\n        </span>\n    </div>\n  );\n}","import { StateType } from '../redux/redux-store';\nimport { Redirect } from \"react-router-dom\"\nimport React from 'react'\nimport { connect } from \"react-redux\";\n\nlet mapStateToPropsRedirect = (state: StateType) => ({\n    isAuth: state.auth.isAuth\n})\n\ntype mapDispatchToProps = {}\n\ntype withAuthRedirectProps = {\n    isAuth: boolean \n}\n\nexport function withAuthRedirect (WrappedComponent: React.ComponentType) {\n    \n    const RedirectComponent: React.FC <withAuthRedirectProps & mapDispatchToProps> = (props) => {\n        \n        let {isAuth, ...restProps} = props;\n        \n        if (!isAuth ) return  <Redirect to='/login' /> \n        return  <WrappedComponent {...restProps} /> \n    }\n\n    let ConnectedAuthRedirectComponent = connect<withAuthRedirectProps, {}, mapDispatchToProps, StateType>\n        (mapStateToPropsRedirect)\n        (RedirectComponent)\n\n    return  ConnectedAuthRedirectComponent;\n}\n\n ","import { connect } from 'react-redux';\nimport { dialogsActions } from '../../redux/dialogs-reducer'\nimport { Dialogs } from \"./Dialogs\";\nimport { StateType } from '../../redux/redux-store';\nimport { withAuthRedirect } from '../../hoc/AuthRedirect';\nimport { compose } from 'redux';\n\n\n\nlet mapStateToProps = (state: StateType) => {\n  return {\n    dialogsData: state.dialogsPage.dialogsData,\n    messageData: state.dialogsPage.messageData,\n  }\n}\n\n\nexport default compose<React.ComponentType>(\n  connect(mapStateToProps, {...dialogsActions}),\n withAuthRedirect)\n (Dialogs)"],"sourceRoot":""}