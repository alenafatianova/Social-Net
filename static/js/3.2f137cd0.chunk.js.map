{"version":3,"sources":["components/Profile/Profile/Profile.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileStatus/ProfileStatus.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/PostsReduxForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","Post","React","memo","props","className","classes","avatar","src","alt","post","counter","likeCount","likes","likeButton","maxLength10","maxLengthCreator","minLength2","minLengthCreator","AddPostForm","handleSubmit","onSubmit","Field","component","Textarea","validate","required","type","name","AddPostReduxForm","reduxForm","form","MyPosts","postElement","postsData","map","posts","id","values","addPost","newPostText","compose","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","style","profileStatusWrapper","spanStyle","onDoubleClick","statusInput","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","placeholder","ProfileInfo","profile","photos","small","statusContainer","Preloader","Profile","mainContent","MyPostsContainer","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getProfile","getStatus","Component","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.2f137cd0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContent\":\"Profile_mainContent__NC_cI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Post_avatar__1wBwP\",\"counter\":\"Post_counter__14HCt\",\"likeCount\":\"Post_likeCount__3jXtZ\",\"likeButton\":\"Post_likeButton__iek-s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusInput\":\"ProfileStatus_statusInput__2L1vx\",\"spanStyle\":\"ProfileStatus_spanStyle__3ZpT-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusContainer\":\"ProfileInfo_statusContainer__1nG4O\",\"userAvatar\":\"ProfileInfo_userAvatar__qlIFO\"};","import React from 'react'\nimport classes from './Post.module.css'\n\n\n export type PostPropsType = {\n    post: string\n    id: number\n    likes: number\n }\nexport const Post = React.memo((props: PostPropsType) => {\n    return (\n            <div>\n                <div className={classes.avatar}>\n                <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcR5W2tli7-nT4GT1zqSkZziPAeOoHuZUwljrQ&usqp=CAU\" alt=\"user-avatar\"/>\n                <div>\n                    {props.post} \n                    <div className={classes.counter}>\n                    <button className={classes.likeCount}>{props.likes}</button>\n                    <button className={classes.likeButton}>Like</button>\n                    </div>\n                </div>\n                </div>\n            </div>\n        )\n    })\n","import React from 'react'\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\nimport { required, minLengthCreator, maxLengthCreator } from '../../../redux/handlers/validators/validators'\nimport { Textarea } from '../../common/FormControl/FormControls';\n\ntype postFormType = {\n    newPostText: string\n}\n\nconst maxLength10 = maxLengthCreator(10);\nconst minLength2 = minLengthCreator(2);\n\nexport const AddPostForm: React.FC<InjectedFormProps<postFormType>> = React.memo(({handleSubmit}) => {\n    return (\n       <form onSubmit={handleSubmit}>\n            <div>\n            <Field \n                component={Textarea}\n                validate={[required, maxLength10, minLength2]}\n                type='textarea'\n                name='newPostText'\n            />\n            </div>\n            <div>\n                <button>Post</button>\n            </div>\n       </form>\n    )\n})\n\n//-----------  HOC for the post redux form  ---------------\nexport const AddPostReduxForm = reduxForm<postFormType>({form: 'postTextarea'})(AddPostForm)","import React from 'react';\nimport {Post} from './Post/Post'\nimport {PostsType} from '../../../redux/store'\nimport { AddPostReduxForm } from './PostsReduxForm';\n\n\nexport type MyPostsType = {\n    postsData: Array<PostsType>\n    addPost: (newPostText: string) => void\n}\nexport const MyPosts = React.memo((props: MyPostsType) => {\n    \nlet postElement = props.postsData.map(posts =>\n  <Post key={posts.id} id={posts.id} post={posts.post} likes={posts.likes}/> \n)\n    \nconst addNewPost = (values: any) => {\n  props.addPost(values.newPostText)\n}\n    \n  return (\n    <div>\n        <h5>Previous Posts</h5>\n        {postElement} \n        <div>\n        <h5>New Post</h5>\n        <AddPostReduxForm onSubmit={addNewPost}/>\n      </div>\n    </div>\n    )\n  }\n)","import {addPostActionCreator, ProfileActionsType} from '../../../redux/profile-reducer'\nimport {  RootStateType } from '../../../redux/store'\nimport {MyPosts} from './MyPosts'\nimport {connect} from 'react-redux'\nimport { compose } from 'redux'\n\n \nlet mapStateToProps = (state: RootStateType) => {\n  return {\n    postsData: state.profilePage.postsData,\n  }\n}\nlet mapDispatchToProps = (dispatch: (actions: ProfileActionsType) => void) => {\n  return {\n    addPost: (newPostText: string) => {\n      dispatch(addPostActionCreator(newPostText))\n    },\n  } \n}\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps))(MyPosts)\n","import React, { ChangeEvent, useState, useEffect } from 'react'\nimport style from './ProfileStatus.module.css'\n\nexport type statusProps = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHooks = React.memo((props: statusProps) => {\n\n  const [editMode, setEditMode] = useState<boolean>(false)\n  const [status, setStatus] = useState<string>(props.status)\n  const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n  }\n  const activateEditMode = () => setEditMode(true)\n  const deactivateMode = () => {\n    setEditMode(false)\n    props.updateStatus(status)\n}\n useEffect(() => {\n     setStatus(props.status)\n }, [props.status]) \n   \n        return (\n        <div className={style.profileStatusWrapper}>\n            {!editMode &&\n             <div className={style.spanStyle}>\n                <span onDoubleClick={activateEditMode}>{props.status}</span>\n            </div>\n            }\n           \n            {editMode &&\n            <div>\n                <input \n                    className={style.statusInput}\n                    onChange={changeStatus}\n                    autoFocus={true}\n                    onBlur={deactivateMode} \n                    value={status} \n                    placeholder=\"what are you thinking about?\"/>\n            </div>\n            }\n        </div>\n    )\n})\n","import React from 'react'\nimport { Preloader } from '../../common/Preloader/Preloader'\nimport {profileType} from '../../../redux/profile-reducer'\nimport { ProfileStatusWithHooks } from '../ProfileStatus/ProfileStatusWithHooks'\nimport style from './ProfileInfo.module.css'\n\n\nexport const ProfileInfo = React.memo((props: profileType) => {\n    \n    if(!props.profile) {\n        return <Preloader/>\n    }\n    \n    return (\n        <div>\n            <img src={props.profile.photos.small} alt=\"\"/>\n             <div className={style.statusContainer }>\n             <div>\n                \n            </div>\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\n            </div>\n            <div>\n            </div>\n        </div>\n    )\n})\n","import React from \"react\";\nimport classes from \"./Profile.module.css\";\nimport MyPostsContainer from \"../MyPosts/MyPostsContainer\";\nimport {ProfileInfo} from \"../ProfileInfo/ProfileInfo\";\nimport {UserProfileType} from '../../../redux/profile-reducer'\n\n\ntype ProfilePropsType = {\n  profile: UserProfileType\n  isAuth: boolean\n  status: string\n  updateStatus: (status: string) => void\n}\n\nexport const Profile = React.memo((props: ProfilePropsType) => {\n\n  return (\n    \n    <div className={classes.mainContent}>\n      <ProfileInfo profile={props.profile} status={props.status}  updateStatus={props.updateStatus} />\n      <MyPostsContainer  />\n    </div>\n  );\n})\n","import React, { ComponentType } from 'react' \nimport {connect} from 'react-redux'\nimport {StateType} from '../../redux/redux-store'\nimport {getProfile, UserProfileType, getStatus, updateStatus} from '../../redux/profile-reducer'\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\nimport {Profile} from './Profile/Profile'\nimport { compose } from 'redux'\n\n\nexport type mapStateToPropsType = {\n    profile: UserProfileType\n    isAuth: boolean\n    status: string\n    updateStatus:  (status: string) => void\n    authorizedUserId: number \n}\nexport type OwnPropsType = {\n    getProfile: (userId: number) => void\n    getStatus: (userId: number) => void\n}\n\nexport type PathProps = {\n    userId:  any \n}\n\nexport type ProfileContainerProps = RouteComponentProps<PathProps> & OwnPropsType & mapStateToPropsType\n\nexport class  ProfileContainer extends React.Component<ProfileContainerProps> {\n    \n    componentDidMount(){\n        let userId = this.props.match.params.userId\n        if(!userId) {\n            userId = this.props.authorizedUserId\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n        this.props.getProfile(userId)\n        this.props.getStatus(userId)\n    }\n    render() {\n\n        return (\n            <Profile {...this.props} \n                    profile={this.props.profile}\n                    status={this.props.status}\n                    updateStatus={this.props.updateStatus}\n            />\n        )\n    }   \n}    \n\n\nlet mapStateToProps = (state: StateType) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.id,\n    isAuth: state.auth.isAuth\n})\n\nexport default compose<ComponentType>(connect(mapStateToProps, {getProfile, getStatus, updateStatus }), \n    withRouter\n)(ProfileContainer)"],"sourceRoot":""}