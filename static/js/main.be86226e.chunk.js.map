{"version":3,"sources":["hoc/AuthRedirect.tsx","redux/dialogs-reducer.ts","App.module.css","components/Navbar/Navbar.module.css","components/common/Preloader/Preloader.module.css","API/API.ts","components/Navbar/Navbar.tsx","components/Friends/Friends.tsx","components/Music/Music.tsx","components/Photos/Photos.tsx","components/Settings/Settings.tsx","redux/handlers/validators/objects-helpers.ts","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","assets/images/userAvatar.jpg","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","redux/auth-reducer.ts","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/app-reducer.ts","redux/navbar-reducer.ts","redux/redux-store.ts","App.tsx","hoc/WithSuspense.tsx","index.tsx","components/common/FormControl/FormControls.tsx","components/Header/Header.module.css","components/common/FormControl/formControls.module.scss","components/common/Preloader/Preloader.tsx","components/common/Paginator/paginator.module.css","redux/handlers/validators/validators.ts","redux/profile-reducer.ts"],"names":["mapStateToPropsRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","SEND_MESSAGE","initialDialogsStore","dialogsData","id","name","messageData","message","DialogsReducer","action","type","messageBody","newMessageTextBody","sendMessageAC","module","exports","instance","axios","create","baseURL","withCredentials","headers","usersAPI","getUsers","currentPage","pageSize","get","response","data","followUser","userId","post","deleteUser","delete","profileAPI","getProfile","getStatus","updateStatus","status","put","authAPI","me","login","email","password","rememberMe","logout","Navbar","React","memo","className","style","link","activeClassName","active","Friends","Music","classes","Photos","Settings","updateObjectInArray","items","itemID","objPropName","newObjProps","map","u","FOLLOW_USER","DELETE_USER","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","SET_PRELOADER","FOLLOWING_IN_PROGRESS","InitialUsersState","users","totalCount","isFetching","followingInProgress","userID","setCurrentPage","setPreloader","setFollowingInProgress","followUnfollowUser","dispatch","apiMethod","actionCreator","a","resultCode","Paginator","onPageChanged","totalItemsCount","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionSizeNumber","rightPortionSizeNumber","cn","paginatorStyle","onClick","filter","p","selectedPage","pageNumber","e","User","user","unfollowUser","alt","img","src","photos","small","userAvatar","followed","disabled","some","Users","getAllUsersSelector","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getFetching","getFollowingProgress","UsersContainer","requestUsers","this","length","Preloader","Component","compose","totalUsersCount","bind","SET_USER_DATA","initialDataState","setAuthData","payload","authData","messages","stopSubmit","_error","Header","header","links","registrate","HeaderContainer","LoginForm","handleSubmit","error","onSubmit","createField","Input","required","undefined","formErrorEmail","LoginReduxForm","reduxForm","form","LoginPage","formData","initialAppState","initilized","INITILIZED_SUCCESS","setInitilized","initialNavbarState","reducers","combineReducers","profilePage","ProfileReducer","dialogsPage","navbar","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","DialogsContainer","lazy","ProfileContainer","AppContainer","initilizedAppThunk","promise","Promise","all","then","withRouter","useEffect","initialized","Wrapper","exact","path","render","fallback","Suspense","Login","SamuraiJSApp","ReactDOM","document","getElementById","placeholder","component","validators","text","validate","FormControl","meta","touched","element","hasError","formControl","Textarea","input","createElement","ldsEllipsis","value","maxLengthCreator","maxLength","minLengthCreator","minLength","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","initialProfileState","postsData","likes","profile","newPost","newPostText","postId","addPostActionCreator","setStatus"],"mappings":"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","file":"static/js/main.be86226e.chunk.js","sourcesContent":["import { StateType } from '../redux/redux-store';\nimport { Redirect } from \"react-router-dom\"\nimport React from 'react'\nimport { connect } from \"react-redux\";\n\nlet mapStateToPropsRedirect = (state: StateType) => ({\n    isAuth: state.auth.isAuth\n})\n\ntype mapDispatchToProps = {\n\n}\n\ntype withAuthRedirectProps = {\n    isAuth: boolean \n}\n\nexport function withAuthRedirect (WrappedComponent: React.ComponentType) {\n    \n    const RedirectComponent: React.FC <withAuthRedirectProps & mapDispatchToProps> = (props) => {\n        \n        let {isAuth, ...restProps} = props;\n        \n        if (!isAuth ) return  <Redirect to='/login' /> \n        return  <WrappedComponent {...restProps} /> \n    }\n\n    let ConnectedAuthRedirectComponent = connect<withAuthRedirectProps, {}, mapDispatchToProps, StateType>\n        (mapStateToPropsRedirect)\n        (RedirectComponent)\n\n    return  ConnectedAuthRedirectComponent;\n}\n\n ","const SEND_MESSAGE = 'SEND_MESSAGE'; \n\nlet initialDialogsStore = {\n    dialogsData: [\n      { id: 1, name: \"Chandler\" },\n      { id: 2, name: \"Monika\" },\n      { id: 3, name: \"Rachel\" },\n      { id: 4, name: \"Ross\" },\n      { id: 5, name: \"Joey\" },\n      { id: 6, name: \"Jennisse\" },\n      { id: 7, name: \"Phoebe\" },\n    ],\n    messageData: [\n      { id: 1, message: \"Hi, whatsapp?\" },\n      { id: 2, message: \"Go to the cinema tonight?\" },\n      { id: 3, message: \"By the way, did you go to your aunt?\" },\n    ],\n  }\nexport const DialogsReducer = (state = initialDialogsStore, action: DialogsActionsType): InitialStateType => {\n  switch(action.type) {  \n      case SEND_MESSAGE: {\n        let messageBody = action.newMessageTextBody;\n        return {\n          ...state,\n          messageData: [...state.messageData, {id: 6, message: messageBody}]\n        }\n      }\n      default: \n        return state;\n    }\n}\n\nexport const sendMessageAC = (newMessageTextBody: string) => ({type: 'SEND_MESSAGE', newMessageTextBody} as const ) \n\nexport type DialogsActionsType =  ReturnType <typeof sendMessageAC>\nexport type InitialStateType = typeof initialDialogsStore","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"App_Wrapper__2FdRQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navbar\":\"Navbar_Navbar__1IxrI\",\"link\":\"Navbar_link__TNvz9\",\"active\":\"Navbar_active__3mbhk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsEllipsis\":\"Preloader_ldsEllipsis__1LsFx\",\"ldsEllipsis1\":\"Preloader_ldsEllipsis1__cV7F1\",\"ldsEllipsis2\":\"Preloader_ldsEllipsis2__1xAXR\",\"ldsEllipsis3\":\"Preloader_ldsEllipsis3__2kTCy\"};","import axios from 'axios'\nimport { UsersType } from '../redux/users-reducer';\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '2fbfa6b3-04a7-447e-953f-70ff4b37ee90'\n    }\n})\n\ntype getUsersResponseType = {\n    items: UsersType[]\n    totalCount: number\n    error: string\n}\ntype ResponseType = {\n    resultCode: number\n    messages: Array<string>\n    data: {}\n}\n\nexport const usersAPI = {\n    async getUsers(currentPage: number, pageSize: number) {\n        const response = await instance.get<getUsersResponseType>(`users?page=${currentPage} &count=${pageSize}`);\n        return response.data;\n    },\n    followUser(userId: number) {\n        return instance.post<ResponseType>(`follow/${userId}`, {})\n    },\n    deleteUser(userId: number) {\n        return instance.delete<ResponseType>(`follow/${userId}`)\n    },\n//    getProfile(userId: number) {\n//        console.warn('Obsolete method. Please use profileAPI object instead.')\n//     return profileAPI.getProfile(userId)\n//    }\n}\n\nexport const profileAPI = {\n    getProfile(userId: number) {\n        return instance.get(`profile/${userId}`)\n    },\n    getStatus(userId: number) {\n        return instance.get(`profile/status/${userId}`)\n    },\n    updateStatus(status: string) {\n        return instance.put('profile/status/', {status})\n    } \n}\n\nexport const authAPI = {\n    me() {\n        return instance.get(`auth/me`)\n    },\n    login(email: string, password: string, rememberMe: boolean) {\n        return instance.post<ResponseType>('auth/login', {email, password, rememberMe})\n    },\n    logout() {\n        return instance.delete<ResponseType>('auth/login')\n    }\n}\n\n\n\n\n\n","import React from 'react';\nimport style from './Navbar.module.css';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navbar = React.memo(() => {\n    return (\n        <div className={style.Navbar}>\n            <div className={style.link}>\n                <NavLink to='/profile' activeClassName={style.active}>Profile</NavLink>\n            </div>\n            <div className={style.link}>\n                <NavLink to='/dialogs' activeClassName={style.active}>Dialogs</NavLink>\n            </div>\n           <div className={style.link}>\n               <NavLink  to='/friends' activeClassName={style.active}>Friends</NavLink >\n            </div>\n            <div className={style.link}>\n               <NavLink  to='/users' activeClassName={style.active}>Users</NavLink >\n            </div>\n           <div className={style.link}>\n               <NavLink  to='/music' activeClassName={style.active}>Music</NavLink >\n            </div>\n           <div className={style.link}>\n               <NavLink to='/photos' activeClassName={style.active}>Photos</NavLink >\n            </div>\n           <div className={style.link}>\n               <NavLink  to='/settings' activeClassName={style.active}>Settings</NavLink >\n            </div>\n        </div>\n    )\n})\n","import React from 'react'\n\nexport const Friends = React.memo(() => {\n    return (\n        <div>\n            Friends\n        </div>\n    )\n})\n","import React from 'react';\nimport classes from './Music.module.css'\n\nexport const Music = React.memo(() => {\n    return (\n        <div className={classes.Music}>\n            Music\n        </div>\n    )\n})\n","import React from 'react';\nimport classes from './Photos.module.css';\n\nexport const Photos = React.memo(() => {\n    return (\n        <div className={classes.Photos}>\n          Photos  \n        </div>\n    )\n})\n","import React from 'react';\nimport classes from './Settings.module.css'\n\nexport const Settings = React.memo(() => {\n    return (\n        <div className={classes.Settings}>\n            settings\n        </div>\n    )\n})\n","import { UsersType } from \"../../users-reducer\";\n\nexport const updateObjectInArray = (items: UsersType[], itemID: number, objPropName: string, newObjProps: {followed: boolean}) => {\n    return items.map((u: any )=> {\n        if (u[objPropName] === itemID) {\n            return {...u, ...newObjProps}\n        }\n        return u;\n    })\n} \n","import { StateType } from './redux-store';\nimport { usersAPI } from '../API/API'\nimport { ThunkAction } from 'redux-thunk';\nimport { Dispatch } from 'redux';\nimport { updateObjectInArray } from './handlers/validators/objects-helpers';\n\n\nconst FOLLOW_USER = 'FOLLOW-USER'\nconst DELETE_USER = 'DELETE-USER'\nconst SET_USERS = 'SET-USERS'\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE'\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT'\nconst SET_PRELOADER = 'SET-PRELOADER'\nconst FOLLOWING_IN_PROGRESS = 'FOLLOWING_IN_PROGRESS'\n\nexport type UsersType = {\n    id: number\n    followed: boolean\n    name: string\n    age: number\n    location: {country: string, city: string}\n    status: string\n    photos: {\n        small: string, \n        large: string\n    }\n}\n\nexport type InitialStateType = {\n    users: Array<UsersType>\n    pageSize: number\n    totalCount: number\n    currentPage: number\n    isFetching: boolean\n    followingInProgress: Array<number>\n}\n\nconst InitialUsersState: InitialStateType = {\n    users: [] as Array<UsersType>,\n    pageSize: 10,\n    totalCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [] \n}\n\nexport type UsersActionType = \n    | ReturnType <typeof deleteUser> \n    | ReturnType <typeof followUser> \n    | ReturnType <typeof setUsers> \n    | ReturnType <typeof setCurrentPage> \n    | ReturnType <typeof setTotalUsersCount> \n    | ReturnType <typeof setPreloader> \n    | ReturnType <typeof setFollowingInProgress>\n\nexport const UsersReducer = (state = InitialUsersState , action: UsersActionType): InitialStateType => {\n    switch(action.type) {\n        case FOLLOW_USER: {\n            return  {\n                ...state, \n                users: updateObjectInArray(state.users, action.userID, 'id', {followed: true})\n                // users: state.users.map(u => {\n                //     if (u.id === action.userID) {\n                //         return {...u, followed: true }\n                //     }\n                //     return u;\n                // })\n            }\n        }\n        case DELETE_USER: {\n           return  {\n                ...state,\n                // users: updateObjectInArray(state.users, action.userID, 'id', {followed: false})\n                users: state.users.map(u => {\n                    if (u.id === action.userID) {\n                        return {...u, followed: false}\n                    }\n                    return u\n                })\n            } \n        }\n        case SET_USERS: {\n            return {\n                ...state, \n                users: action.users   \n            }\n        }\n        case SET_CURRENT_PAGE: {\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n        }\n        case SET_TOTAL_USERS_COUNT: {\n            return {\n                 ...state,\n                totalCount: action.totalCount\n           }\n        }\n        case SET_PRELOADER: {\n            return {\n                ...state,\n                isFetching: action.isFetching\n            }\n        }\n        case FOLLOWING_IN_PROGRESS: {\n            return {\n                ...state, \n                followingInProgress: action.isFetching \n                ? [...state.followingInProgress, action.id]\n                : state.followingInProgress.filter(id => id !== action.id)\n            }\n        }\n        default: \n            return state;\n    }\n}\n\nexport const deleteUser = (id: number) => ({type: DELETE_USER, userID: id} as const) \nexport const followUser = (id: number) => ({type: FOLLOW_USER, userID: id} as const) \nexport const setUsers = (users: Array<UsersType>) => ({type: SET_USERS, users} as const) \nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\nexport const setTotalUsersCount = (totalCount: number) => ({type: SET_TOTAL_USERS_COUNT,  totalCount} as const)\nexport const setPreloader = (isFetching: boolean) => ({type: SET_PRELOADER, isFetching} as const)\nexport const setFollowingInProgress = (isFetching: boolean, id: number, ) => ({\n    type: FOLLOWING_IN_PROGRESS, id, isFetching} as const\n)\n\n\n//----------getUsers, followUser, unfollowUser  это санка-------------------------\ntype UsersThunksType = ThunkAction<void, StateType, unknown, UsersActionType>\n\n\nexport const requestUsers = (currentPage: number, pageSize: number ): UsersThunksType => async(dispatch) => {                                               \n        dispatch(setPreloader(true))\n        dispatch(setCurrentPage(currentPage))\n        const data = await usersAPI.getUsers(currentPage, pageSize)\n        dispatch(setPreloader(false))\n        dispatch(setUsers(data.items))\n        dispatch(setTotalUsersCount(data.totalCount))\n}\n\nconst followUnfollowUser =  async(dispatch: Dispatch, id: number, apiMethod: any, actionCreator: any) => {\n    dispatch(setFollowingInProgress(true, id))\n    const response = await apiMethod(id) \n    if (response.data.resultCode === 0) {\n        dispatch(actionCreator(id))\n    }\n    dispatch(setFollowingInProgress(false, id))\n}\n\nexport const unfollowUser = (id: number): UsersThunksType => {\n    return async(dispatch) => { \n        followUnfollowUser(dispatch, id, usersAPI.deleteUser.bind(usersAPI), deleteUser)             \n    }\n}\n \nexport const follow = (id: number): UsersThunksType => {\n    return async(dispatch) => {    \n        followUnfollowUser(dispatch, id, usersAPI.followUser.bind(usersAPI), followUser)\n    }\n}\n\n","import React, { useState } from 'react'\nimport style from './paginator.module.css'\nimport cn from 'classnames'\n\ntype paginatorProps = {\n    onPageChanged: (pageNumber: number) => void\n    currentPage: number\n    totalItemsCount: number \n    pageSize: number\n    portionSize?: number\n}\n\nexport const Paginator: React.FC<paginatorProps> = React.memo((\n    {onPageChanged, currentPage, totalItemsCount, pageSize, portionSize = 10}) => {\n    \n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\n   \n    let pages: Array<number> = []\n    for (let i = 1; i <= pagesCount; i ++ ) {\n        pages.push(i);\n    }\n    const portionCount = Math.ceil(pagesCount / portionSize);\n    const [portionNumber, setPortionNumber] = useState(1);\n    const leftPortionSizeNumber = (portionNumber - 1) * portionSize + 1;\n    const rightPortionSizeNumber = (portionNumber * portionSize)\n    \n    return (\n        <div className={cn(style.paginatorStyle)}>\n            {portionNumber > 1 && \n            <button onClick={() => {setPortionNumber(portionNumber - 1)}}>Previous</button>}\n                    {pages\n                        .filter(p => p >= leftPortionSizeNumber && p <= rightPortionSizeNumber)\n                        .map((p) => {\n                            return  <span className={cn({\n                                [style.selectedPage] : currentPage === p \n                            },  style.pageNumber)}\n                                key={p}\n                                onClick={(e) => {onPageChanged(p)}}>\n                                {p}\n                            </span>\n                            })}\n                    {portionCount > portionNumber && \n                        <button onClick={() => {setPortionNumber(portionNumber + 1)}}>Next</button>}\n        </div>\n    )\n})\n","export default __webpack_public_path__ + \"static/media/userAvatar.7d923905.jpg\";","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { UsersType } from '../../redux/users-reducer'\nimport style from './Users.module.css'\nimport userAvatar from '../../assets/images/userAvatar.jpg'\n\ntype userTypeProps = {\n    user: UsersType\n    followingInProgress: number[]\n    unfollowUser: (id: number) => void\n    followUser: (id: number) => void\n}\n\nexport const User: React.FC<userTypeProps> = React.memo(({user, followingInProgress, unfollowUser, followUser}) => {\n    return (\n        <div>\n           <span>\n                <div>\n                    <NavLink to={'/profile/' + user.id}>\n                        <img alt=\"user-avatar\" className={style.img} src={user.photos.small != null ? user.photos.small : userAvatar}/>\n                    </NavLink>\n                        </div>\n                            <div>\n                                {\n                                    user.followed \n                                    ? <button disabled={followingInProgress.some(id => id === user.id)} \n                                        onClick = {() => {unfollowUser(user.id)}}>Delete</button>\n                                    : <button disabled={followingInProgress.some(id => id === user.id)} \n                                        onClick={() => {followUser(user.id)}}>Add</button> \n                                }\n                            </div>\n                </span>\n                    <span>\n                        <div>\n                            <div>{user.name}</div>\n                            <div>{user.status}</div>\n                        </div>\n                            <div>{'u.location.country'}</div>\n                            <div>{'u.location.city'}</div>\n                    </span>\n            </div>\n    )\n})\n","import React from 'react'\nimport { UsersType } from '../../redux/users-reducer'\nimport { Paginator } from '../common/Paginator/Paginator'\nimport { User } from './User'\n\n\ntype UsersPropsType = {\n    totalItemsCount: number \n    pageSize: number\n    currentPage: number\n    users: Array<UsersType>\n    followingInProgress: number[]\n    portionSize: number\n    onPageChanged: (pageNumber: number) => void\n    unfollowUser: (id: number) => void\n    followUser: (id: number) => void\n}\n\n\nexport const Users = (props: UsersPropsType) => {\n    \n    return (\n        <div>\n            <Paginator \n                onPageChanged={props.onPageChanged} \n                currentPage={props.currentPage} \n                pageSize={props.pageSize} \n                totalItemsCount={props.totalItemsCount}\n                portionSize={props.portionSize}/> \n            <div>\n                {\n                    props.users.map(u => <User \n                        key={u.id}  \n                        followingInProgress={props.followingInProgress} \n                        unfollowUser={props.unfollowUser}\n                        followUser={props.followUser}\n                        user={u}\n                        />)\n                }\n                </div>\n             </div>\n    )\n}\n","import { StateType } from './redux-store';\nimport {createSelector} from 'reselect'\n\nconst getAllUsers = (state: StateType) => {\n    return state.usersPage.users\n};\nexport const getAllUsersSelector = createSelector(getAllUsers, \n    (users) => {return users.filter(u => true)\n});\n\n\nexport const getPageSize = (state: StateType) => {\n    return state.usersPage.pageSize\n};\nexport const getTotalUsersCount = (state: StateType) => {\n    return state.usersPage.totalCount\n};\nexport const getCurrentPage = (state: StateType) => {\n    return state.usersPage.currentPage\n};\nexport const getFetching = (state: StateType) => {\n    return state.usersPage.isFetching\n};\nexport const getFollowingProgress = (state: StateType) => {\n    return state.usersPage.followingInProgress\n};","import React, { ComponentType } from 'react'\nimport { connect } from 'react-redux'\nimport { followUser, unfollowUser, setCurrentPage, \n        setFollowingInProgress, requestUsers } from '../../redux/users-reducer'\nimport { StateType } from '../../redux/redux-store'\nimport { UsersType } from '../../redux/users-reducer'\nimport { Users } from './Users'\nimport { Preloader } from '../common/Preloader/Preloader'\nimport { withAuthRedirect } from '../../hoc/AuthRedirect'\nimport { compose } from 'redux'\nimport { getAllUsersSelector, getCurrentPage, getFetching, \n        getFollowingProgress, getPageSize, getTotalUsersCount } from '../../redux/users-selectors'\n\n\nexport class UsersContainer extends React.Component<{\n    setCurrentPage: (currentPage: number) => void,\n    setFollowingInProgress: (isFetching: boolean, id: number) => void,\n    requestUsers: (currentPage: number, pageSize: number) => void,  \n    users: Array<UsersType>,\n    totalItemsCount: number,\n    portionSize: number,\n    pageSize: number,\n    currentPage: number,\n    isFetching: boolean,\n    followingInProgress: number[],\n    unfollowUser: (id: number) => void,\n    followUser: (id: number) => void,\n    }, {}> \n    \n    {\n    componentDidMount() {\n        if (this.props.users.length ===  0) {\n        this.props.requestUsers(this.props.currentPage, this.props.pageSize)\n        }\n    }\n     onPageChanged = (pageNumber: number) => {\n        this.props.setCurrentPage(pageNumber)\n        this.props.requestUsers(pageNumber, this.props.pageSize)\n}\n    render () {\n        return <>\n        {this.props.isFetching ? <Preloader/> : null}\n        <Users \n            followUser={this.props.followUser}\n            unfollowUser={this.props.unfollowUser}\n            followingInProgress={this.props.followingInProgress}\n            totalItemsCount={this.props.totalItemsCount} \n            pageSize={this.props.pageSize} \n            currentPage={this.props.currentPage}\n            users={this.props.users}\n            onPageChanged={this.onPageChanged}\n            portionSize={this.props.portionSize}\n            />   \n        </>  \n    }\n}\n\nconst  mapStateToProps = (state: StateType) => {\n    return {\n        users: getAllUsersSelector(state),\n        pageSize: getPageSize(state),\n        totalUsersCount: getTotalUsersCount(state),\n        currentPage: getCurrentPage(state),\n        isFetching: getFetching(state),\n        followingInProgress: getFollowingProgress(state)\n    }\n}\n\n\nexport default compose<ComponentType>(connect(mapStateToProps, \n    {followUser, unfollowUser, setCurrentPage, setFollowingInProgress, requestUsers}), \n    withAuthRedirect)(UsersContainer) \n       \n","import { StateType } from \"./redux-store\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { authAPI } from \"../API/API\";\nimport { FormAction, stopSubmit } from \"redux-form\";\n\nconst SET_USER_DATA = \"social-net/auth/SET_USER_DATA\";\n\nexport let initialDataState: initialDataStateType = {\n    id: null,\n    email: null,\n    login: null,\n    isFetching: true,\n    isAuth: false,\n};\nexport type initialDataStateType = {\n    id: number | null;\n    email: string | null;\n    login: string | null;\n    isAuth: boolean;\n    isFetching: boolean;\n};\nexport type setAuthDataACPayloadType = {\n  id: number | null;\n  email: string | null;\n  login: string | null;\n  isAuth: boolean;\n};\n\nexport type setAuthDataType = {\n  type: typeof SET_USER_DATA;\n  payload: setAuthDataACPayloadType;\n};\n\nexport const authReducer = ( state = initialDataState, action: authTypeActionType): initialDataStateType => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return {\n        ...state,\n        ...action.payload,\n      };\n    default: {\n      return {\n        ...state,\n      };\n    }\n  }\n};\n\nexport const setAuthData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => \n({type: SET_USER_DATA,payload: { id, email, login, isAuth }, } as const);\n\nexport type authTypeActionType = ReturnType<typeof setAuthData>;\n\ntype ThunkType = ThunkAction<void, StateType, unknown, authTypeActionType | FormAction>;\n\nexport const authData = (): ThunkType => async(dispatch) => {\n    let response = await authAPI.me()\n    if (response.data.resultCode === 0) {\n      let { id, email, login } = response.data.data;\n      dispatch(setAuthData(id, email, login, true));\n    }\n};\n\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkType => async(dispatch) => {\n  let response = await authAPI.login(email, password, rememberMe);\n    if (response.data.resultCode === 0) {\n      dispatch(authData());\n    } else {\n      let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error occured\";\n      dispatch(stopSubmit(\"login\", { _error: message }));\n    }\n};\n\nexport const logout = (): ThunkType => async(dispatch) => {\n   let response = await authAPI.logout()\n      if (response.data.resultCode === 0) {\n        dispatch(setAuthData(null, null, null, false));\n    }\n}\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport classes from './Header.module.css' \n\n\nexport type mapStateToPropsType = {\n    login: string | null\n    isAuth: boolean\n}\n  \nexport type mapDispatchToPropsType = {\n    logout: () => void\n}\n\n\nexport const Header: React.FC<mapStateToPropsType & mapDispatchToPropsType> = React.memo((props) => {\n    return (\n        <div className={classes.header}>\n           <div className={classes.links}>\n           <div className={classes.login}>\n               {\n                props.isAuth \n                ? <div>{props.login } <button onClick={props.logout}>Log Out</button></div>\n                : <NavLink to={'/login'} activeClassName={classes.active}>Login</NavLink>}\n            </div>\n            <div className={classes.registrate}>\n            <NavLink to={'/registration'} activeClassName={classes.active}>Sign In</NavLink>\n            </div>\n           </div>\n        </div>\n    )\n})\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { StateType } from '../../redux/redux-store'\nimport { logout } from '../../redux/auth-reducer'\nimport {mapStateToPropsType, mapDispatchToPropsType, Header} from './Header'\nimport { compose } from 'redux'\n\n\nexport class HeaderContainer extends React.Component<mapStateToPropsType & mapDispatchToPropsType> {\n    render() {\n        return (\n            <Header {...this.props} \n            />\n        )\n    } \n}\n\nconst mapStateToProps = (state: StateType) => ({\n        isAuth: state.auth.isAuth,\n        login: state.auth.login,\n} as mapStateToPropsType)\n\n\nexport default compose(\n    connect(\n    mapStateToProps, \n    {logout}))(HeaderContainer)\n\n","import React from 'react'\nimport { connect} from 'react-redux'\nimport {reduxForm, InjectedFormProps} from 'redux-form'\nimport { required } from '../../redux/handlers/validators/validators'\nimport { createField, Input } from '../common/FormControl/FormControls'\nimport { login, logout } from '../../redux/auth-reducer'\nimport { Redirect } from 'react-router'\nimport { StateType } from '../../redux/redux-store'\nimport style from '../common/FormControl/formControls.module.scss'\n\ntype FormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean \n}\ntype formPageProps = {\n    login: (email: string, password: string, rememberMe: boolean ) => void\n    isAuth: boolean\n}\n\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = React.memo(({handleSubmit, error}) => {\n   return (\n    <form onSubmit={handleSubmit}>\n        {createField<LoginFormValuesTypeKeys>('Email', 'email', Input, [required])}\n        {createField<LoginFormValuesTypeKeys>('Password', 'password', Input, [required], {type: 'password'})}\n        {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', Input, [], {type: 'checkbox'}, 'remember me' )}\n     {error && <div className={style.formErrorEmail}>\n            {error}\n        </div>\n    }\n    <div>\n        <button>Login</button>\n    </div>\n</form>\n   )\n})\n\n//---------- This is \"HOC\" for form -------------------------\nconst LoginReduxForm  = reduxForm<FormDataType>({form: 'login'})(LoginForm)\n\ntype LoginFormValuesTypeKeys = Extract<keyof FormDataType, string>\n\nconst LoginPage = React.memo((props: formPageProps) => {\n  \n    const onSubmit = (formData: FormDataType) => {\n      login(formData.email, formData.password, formData.rememberMe)\n    }\n    if(props.isAuth) {\n        return <Redirect to='/profile'/> \n    }\n    return (\n        <div>\n           <div>\n               <h1>Login</h1>\n                 <LoginReduxForm onSubmit={onSubmit} />\n            </div> \n        </div>\n    )\n})\n\nconst mapStateToProps = (state: StateType) => ({\n    isAuth: state.auth.isAuth\n})\nexport default connect(mapStateToProps, {login, logout})(LoginPage)\n","import { StateType } from './redux-store';\nimport { ThunkAction } from 'redux-thunk';\nimport { authData } from './auth-reducer';\n\n\nexport let initialAppState: initialAppStateType = {\n    initilized: false,\n};\nexport type initialAppStateType = {\n    initilized: boolean | null,\n}\n\nconst INITILIZED_SUCCESS = 'INITILIZED_SUCCESS'\n\nexport const appReducer = (state: initialAppStateType = initialAppState, action: appActionsType) => {\n    switch(action.type) {\n        case INITILIZED_SUCCESS:\n            return {\n                ...state,\n                initilized: true\n            }\n        default: {\n            return state;\n        }\n    }\n};\n\nexport const setInitilized = () => ({type: INITILIZED_SUCCESS} as const);\n\nexport type appActionsType = ReturnType<typeof setInitilized>;\n\ntype appThunkType = ThunkAction<void, StateType, unknown, appActionsType>\n\nexport const initilizedAppThunk = (): appThunkType => {\n    return (dispatch) => {\n        let promise = dispatch(authData())\n        Promise.all([promise]).then(() => {\n            dispatch(setInitilized)\n        })\n    }\n}\n\n","\nlet initialNavbarState = {}\n\nexport const  NavbarReducer = (state = initialNavbarState, action: any) => {\n    return state;\n}\n","import { appReducer } from './app-reducer';\nimport { UsersReducer } from './users-reducer';\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\nimport {ProfileReducer} from './profile-reducer'\nimport {DialogsReducer} from './dialogs-reducer'\nimport {NavbarReducer} from './navbar-reducer'\nimport { authReducer } from './auth-reducer'\nimport thunkMiddleware from 'redux-thunk'\nimport { reducer as formReducer } from 'redux-form'\n\n\n\nlet reducers = combineReducers({\n    profilePage: ProfileReducer,\n    dialogsPage: DialogsReducer,\n    navbar: NavbarReducer,\n    usersPage:  UsersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer,\n})\n\nexport type StateType = ReturnType<typeof reducers>\n\n\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware))\n\nexport default store;\n","import React, { ComponentType, Suspense } from 'react';\nimport classes from './App.module.css';\nimport { Navbar } from './components/Navbar/Navbar';\nimport { BrowserRouter, Route, withRouter } from 'react-router-dom';\nimport { Friends } from './components/Friends/Friends';\nimport { Music } from './components/Music/Music';\nimport { Photos } from './components/Photos/Photos'\nimport { Settings } from './components/Settings/Settings';\nimport UsersContainer  from './components/Users/UsersContainer'\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport LoginPage from './components/Login/Login'\nimport {initilizedAppThunk} from '../src/redux/app-reducer'\nimport { connect, Provider } from 'react-redux';\nimport { compose } from 'redux';\nimport { Preloader } from './components/common/Preloader/Preloader';\nimport { useEffect } from 'react';\nimport store from './redux/redux-store';\nimport { WithSuspense } from './hoc/WithSuspense';\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\n \nexport type appProps = {\n  initialized: boolean\n  initilizedAppThunk: () => void\n}\n\nexport const App = (props: appProps) => {\n  \n  useEffect(() => {\n    props.initilizedAppThunk()\n      return () => {\n    }\n  }, [props])\n    \n    if (props.initialized) {\n      return <Preloader/>\n    }\n    \n    return (\n        <div>\n          <div className={classes.Wrapper}>\n            <HeaderContainer  />\n            <Navbar />\n            <Route exact path=\"/dialogs\" render={() => { \n              return  <Suspense fallback={<div>Loading...</div>}>\n                  <DialogsContainer />\n              </Suspense>\n            }}/>\n            <Route exact path=\"/profile/:userId?\" render={WithSuspense(ProfileContainer)} />\n            <Route exact path=\"/friends\" render={() => <Friends />} />\n            <Route exact path=\"/users\" render={() => <UsersContainer />} />\n            <Route exact path=\"/music\" render={() => <Music />} />\n            <Route exact path=\"/photos\" render={() => <Photos />} />\n            <Route exact path=\"/settings\" render={() => <Settings />} />\n            <Route exact path=\"/login\" render={() => <LoginPage />} />\n          </div>\n        </div>\n    );\n  }\n\n\n\nexport const AppContainer = compose<ComponentType>(connect(null, {initilizedAppThunk}), withRouter)(App);\n\nexport const SamuraiJSApp = () => {\n  return (\n    <BrowserRouter>\n      <Provider store={store}>\n      <AppContainer /> \n      </Provider>\n      </BrowserRouter>\n  )\n}","import React from 'react'\n\ntype wrappedComponentProps = {\n\n}\n\nexport const WithSuspense = (WrappedComponent: React.ComponentType) => {\n    return (props: wrappedComponentProps) => {\n        return <React.Suspense fallback={<div>Loading...</div>}>\n            <WrappedComponent {...props}/>\n        </React.Suspense>\n        \n    }\n}\n","import './index.css';\nimport React from 'react'\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { SamuraiJSApp } from \"./App\";\n\n  ReactDOM.render(\n    <SamuraiJSApp/>\n      ,document.getElementById(\"root\")\n  );\n\n\n","import React from 'react'\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form'\nimport { FieldValidatorType } from '../../../redux/handlers/validators/validators'\nimport style from './formControls.module.scss'\n\ntype validationProps = {\n    meta: WrappedFieldMetaProps\n    element: any\n}\n\nexport function createField<FormKeysType extends string>( \n        placeholder: string | undefined, \n        name: FormKeysType, \n        component: React.FC<WrappedFieldProps>, \n        validators: Array<FieldValidatorType>, \n        props = {}, text = \"\") {\n    return (\n    <div>\n        <Field \n            placeholder={placeholder} \n            name={name} \n            component={component} \n            validate={validators}\n            {...props}  \n            /> {text}\n    </div>\n    )\n}\n\n\nconst FormControl: React.FC<validationProps> = React.memo(({meta: {touched, error}, element}) => {\n    const hasError = touched && error\n    return (\n        <div className={ hasError ? style.error : style.formControl}>\n            <div>\n                <div>{element}</div>\n               { hasError && <span>{error}</span>}\n            </div>\n        </div>\n    )\n})\n\n\nexport const Textarea: React.FC<WrappedFieldProps> = React.memo((props) => {\n    const {input, meta, ...restProps} = props\n   return <FormControl {...props} element={React.createElement('textarea', {...input, ...meta, ...restProps})}></FormControl>   \n})\n\nexport const Input: React.FC<WrappedFieldProps> = React.memo((props) => {\n    const {input, meta, ...restProps} = props\n    return <FormControl {...props} element={React.createElement('input', {...input, ...meta, ...restProps})}></FormControl>\n})","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"links\":\"Header_links__TCu1V\",\"active\":\"Header_active__vmCnS\",\"login\":\"Header_login__3V3Qa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"formControls_error__66oGZ\",\"formErrorEmail\":\"formControls_formErrorEmail__3h_M7\"};","import React from 'react'\nimport style from './Preloader.module.css'\n\nexport const Preloader = React.memo(() => {\n    return (\n        <div>\n            <div className={style.ldsEllipsis}><div></div><div></div><div></div><div></div></div>\n        </div>\n    )\n})\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginatorStyle\":\"paginator_paginatorStyle__F5njr\",\"pageNumber\":\"paginator_pageNumber__guCgF\",\"selectedPage\":\"paginator_selectedPage__Qa29V\"};","\nexport type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value) => {\n    if(value) return undefined;\n    return 'Field is required';\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if(value.length > maxLength ) return `Text can be ${maxLength} symbols only`\n    return undefined\n}\n\nexport const minLengthCreator = (minLength: number): FieldValidatorType => (value) => {\n    if (value.length < minLength) return `Text should be more than ${minLength} symbols`\n}","import { ThunkAction } from 'redux-thunk';\nimport {profileAPI} from '../API/API'\nimport { StateType } from './redux-store';\nimport {newPostType, ProfilePageType} from './store'\n\nconst ADD_POST = 'ADD-POST';\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\nconst SET_STATUS = 'SET-STATUS';\nconst DELETE_POST = 'DELETE-POST'\n\nexport type initialProfileStateType = {\n  \n  postsData: Array<PostsDataType>\n  profile: null\n  status: string\n}\nexport type PostsDataType = {\n  id: number\n  post: string\n  likes: number\n}\n\nexport type UserProfileType = {\n  aboutMe: string\n  userId: number\n  lookingForAJob: boolean\n  lookingForAJobDescription: string | null\n  fullName: string\n  photos: photosType\n  contacts: contactsType\n  status: string\n}\n\nexport type profileType = {\n  profile: UserProfileType\n  status: string\n  updateStatus: (status: string) => void\n}\n\nexport type photosType = {\n  small: string\n  large: string\n}\nexport type contactsType = {\n  github: string | null\n  vk: string | null\n  facebook: string | null\n  instagram: string | null\n  twitter: string | null\n  website: string | null\n  youtube: string | null\n  mainLink: string | null\n}\n\n\nlet initialProfileState: initialProfileStateType = {\n   \n    postsData: [\n      { id: 1, post: \"Heeeelloooo, guys!\", likes: 33 },\n      { id: 2, post: \"Let's go and eat some pizza!!!\", likes: 65 },\n      { id: 3, post: \"Found 10 dollars today...anyone lost it?\", likes: 12 },\n    ],\n    profile: null,\n    status: '',\n}\n\nexport const ProfileReducer = (state: ProfilePageType = initialProfileState, action:ProfileActionsType) => {\n    switch(action.type) {\n    \n  case ADD_POST: {\n      const newPost: newPostType = {\n        id: 5,\n        post: action.newPostText,\n        likes: 0,\n    }\n    return {\n      ...state,\n      newPostText: '',\n      postsData: [...state.postsData, newPost]\n    }\n  }\n  case SET_USER_PROFILE: {\n    return {\n          ...state,\n          profile: action.profile\n        }\n      }\n\n      case SET_STATUS: {\n        return {\n          ...state,\n          status: action.status\n        }\n      }\n      case DELETE_POST: {\n        return {\n          ...state,\n          postsData: state.postsData.filter(p => p.id !== action.postId)\n        }\n      }\n      default:\n        return state;  \n  }\n}\n\nexport const addPostActionCreator = (newPostText: string) => ({type: ADD_POST, newPostText} as const) \nexport const setUserProfile = (profile: UserProfileType ) => ({type: SET_USER_PROFILE, profile: profile} as const)\nexport const setStatus = (status: string) => ({type: SET_STATUS, status}as const) \nexport const deletePost = (postId: number) => ({type: DELETE_POST, postId} as const)\n\ntype ThunksType =  ThunkAction<void, StateType, unknown, ProfileActionsType>\n\nexport const getProfile = (userId: number): ThunksType => async(dispatch) => {                       \n  let response = await profileAPI.getProfile(userId)\n    dispatch(setUserProfile(response.data))\n}\n\nexport const getStatus = (userId: number): ThunksType => async(dispatch) => {\n  let response = await profileAPI.getStatus(userId)\n  dispatch(setStatus(response.data))\n}\n\nexport const updateStatus = (status: string): ThunksType => async(dispatch) => {\n  let response = await profileAPI.updateStatus(status)\n  if(response.data.resultCode === 0) {\n    dispatch(setStatus(status))\n  }\n}\n\nexport type ProfileActionsType = \n            | ReturnType <typeof addPostActionCreator> \n            | ReturnType <typeof setUserProfile> \n            | ReturnType <typeof setStatus> \n            | ReturnType <typeof deletePost>\n            \n"],"sourceRoot":""}