{"version":3,"sources":["api/profile-api.ts","redux/profile-reducer.ts","assets/images/userAvatar.jpg","redux/dialogs-reducer.ts","App.module.css","api/api.ts","styles/Preloader.module.css","styles/Navbar.module.css","components/common/FormControl/FormControls.tsx","components/Navbar/Navbar.tsx","components/Friends/Friends.tsx","components/Music/Music.tsx","components/Photos/Photos.tsx","components/Settings/Settings.tsx","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","redux/users-selectors.ts","redux/handlers/validators/objects-helpers.ts","api/users-api.ts","redux/users-reducer.ts","components/common/SearchForm/UserSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","api/auth-api.ts","api/captcha-api.ts","redux/auth-reducer.ts","components/Login/Login.tsx","redux/app-reducer.ts","redux/navbar-reducer.ts","redux/redux-store.ts","hoc/WithSuspense.tsx","components/Header/Header.tsx","App.tsx","index.tsx","styles/Header.module.css","styles/formControls.module.scss","components/common/Preloader/Preloader.tsx","redux/handlers/validators/validators.ts","styles/paginator.module.css"],"names":["profileAPI","userId","instance","get","then","res","data","status","put","file","formData","FormData","append","headers","profile","initialProfileState","postsData","id","post","likes","ProfileReducer","state","action","type","newPost","newPostText","filter","p","postId","photos","ProfileActions","addPost","setUserProfile","setStatus","deletePost","savePhotoSuccess","getProfile","dispatch","a","console","log","getStatus","updateStatus","resultCode","savePhoto","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","initialDialogsState","dialogsData","name","messageData","message","DialogsReducer","messageBody","newMessageTextBody","dialogsActions","sendMessage","module","exports","ResultCodeEnum","CaptchaResultCodeEnum","axios","create","baseURL","withCredentials","createField","placeholder","component","validators","props","text","validate","FormControl","meta","touched","error","children","hasError","className","style","formControl","Textarea","input","restProps","Input","Navbar","React","memo","link","to","activeClassName","active","chat","Friends","Music","Photos","Settings","Paginator","onPageChanged","currentPage","totalItemsCount","pageSize","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionSizeNumber","rightPortionSizeNumber","cn","paginatorStyle","onClick","map","selectedPage","pageNumber","e","User","user","followingInProgress","followUser","unfollowUser","alt","img","src","small","userAvatar","followed","disabled","some","getAllUsers","usersPage","users","getPageSize","createSelector","u","getTotalUsersCount","totalCount","getCurrentPage","getFetching","isFetching","getFollowingProgress","getUsersFilter","updateObjectInArray","items","itemID","objPropName","newObjProps","usersAPI","getUsers","term","friend","follow","unfollow","delete","InitialUsersState","actions","payload","requestUsers","_followUnfollowFlow","apiMethod","actionCreator","searchValidate","values","UserSearchForm","initialValues","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","value","Users","useSelector","totalUsersCount","useEffect","useDispatch","followUserHandler","bind","unfollowUserHandler","UsersPage","Preloader","authAPI","email","password","rememberMe","captcha","securityAPI","initialDataState","login","isAuth","captchaURL","authActions","url","authData","meData","success","getCaptcha","LoginReduxForm","reduxForm","form","handleSubmit","required","undefined","formErrorEmail","LoginPage","loginData","captchaIsRequired","length","initialAppState","initilized","globalerror","appActions","initilizedAppThunk","promise","all","initialNavbarState","reducers","combineReducers","profilePage","dialogsPage","navbar","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","WithSuspense","WrappedComponent","Suspense","fallback","Header","header","links","logoutButton","signInLink","DialogsContainer","lazy","ProfileContainer","ChatPage","AppContainer","connect","withRouter","initialized","SuspendedDialogs","SuspendedProfile","SuspendedChat","classes","Wrapper","exact","from","path","render","SamuraiJSApp","basename","process","ReactDOM","document","getElementById","ldsEllipsis","maxLengthCreator","maxLength"],"mappings":"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","file":"static/js/main.dfbb4c85.chunk.js","sourcesContent":["import { photosType, UserProfileType } from \"../types/types\"\nimport { apiResponseType, instance } from \"./api\"\n\ntype savePhotoResponseType = {\n    photos: photosType\n}\n\nexport const profileAPI = {\n     getProfile(userId: number) {\n        return instance.get<UserProfileType>(`profile/${userId}`).then(res => res.data)\n    },   \n    getStatus(userId: number) {\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data)\n    },\n    updateStatus(status: string) {\n       return instance.put<apiResponseType>('profile/status/', {status}).then(res => res.data)\n    },\n    savePhoto(file: File) {\n        const formData = new FormData()\n        formData.append('image', file)\n        return instance.put<apiResponseType<savePhotoResponseType>>('profile/photo', formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }).then(res => res.data)\n    },\n    saveProfile(profile: UserProfileType) {\n       return instance.put<apiResponseType>(`profile`, profile).then(res => res.data)\n    }\n}","import { Dispatch } from 'redux';\nimport { FormAction, stopSubmit } from 'redux-form';\nimport { profileAPI } from '../api/profile-api';\nimport { photosType, PostsDataType, UserProfileType } from '../types/types';\nimport { BaseThunkType, InferActionsType, StateType } from './redux-store';\n\n\nexport const initialProfileState = {\n    postsData: [\n      { id: 1, post: \"Heeeelloooo, guys!\", likes: 33 },\n      { id: 2, post: \"Let's go and eat some pizza!!!\", likes: 65 },\n      { id: 3, post: \"Found 10 dollars today...anyone lost it?\", likes: 12 },\n    ] as Array <PostsDataType>,\n    profile: null as UserProfileType | null,\n    status: '', \n}\nexport type initialProfileStateType = typeof initialProfileState\nexport type ProfileActionsType = InferActionsType<typeof ProfileActions>\ntype ProfileThunkType = BaseThunkType<ProfileActionsType |FormAction >\n\nexport const ProfileReducer = (state = initialProfileState, action: ProfileActionsType): initialProfileStateType => {\n    switch(action.type) {\n  case 'ADD_POST': {\n      const newPost = {\n        id: 5,\n        post: action.newPostText,\n        likes: 0,\n    }\n    return {\n      ...state,\n      postsData: [...state.postsData, newPost]\n    }\n  }\n  case 'SET_USER_PROFILE': {\n    return {\n          ...state,\n          profile: action.profile\n        }\n      }\n      case 'SET_STATUS': {\n        return {\n          ...state,\n          status: action.status\n        }\n      }\n      case 'DELETE_POST': {\n        return {\n          ...state,\n          postsData: state.postsData.filter(p => p.id !== action.postId)\n        }\n      }\n      case 'SAVE_PHOTO_SUCCESS': \n        return {...state, profile: {...state.profile, photos: action.photos} as UserProfileType}\n      default:\n        return state;  \n  }\n}\n\n\n\n//--- Action Creators\nexport const ProfileActions = {\n  addPost:  (newPostText: string) => ({type: 'ADD_POST', newPostText} as const),\n  setUserProfile: (profile: UserProfileType ) => ({type: 'SET_USER_PROFILE', profile: profile} as const),\n  setStatus: (status: string) => ({type: 'SET_STATUS', status}as const),\n  deletePost: (postId: number) => ({type: 'DELETE_POST', postId} as const),\n  savePhotoSuccess:  (photos: photosType) => ({type: 'SAVE_PHOTO_SUCCESS', photos} as const),\n}\n\n\n\n//--- redux-thunks -----\nexport const getProfile = (userId: number): ProfileThunkType => async(dispatch: Dispatch) => {\n  try {\n    let data = await profileAPI.getProfile(userId)\n    dispatch(ProfileActions.setUserProfile(data))\n  } catch(error) {\n    console.log(error)}\n}\n\nexport const getStatus = (userId: number): ProfileThunkType => async(dispatch: Dispatch) => {\n  try {\n    let data = await profileAPI.getStatus(userId)\n    dispatch(ProfileActions.setStatus(data))\n  } catch(err) {\n    console.log(err)\n  }\n}\n\nexport const updateStatus = (status: string): ProfileThunkType => async(dispatch) => {\n  try {\n    let data = await profileAPI.updateStatus(status)\n    if(data.resultCode === 0) {\n      dispatch(ProfileActions.setStatus(status))\n    }\n  } catch (err) {\n    console.log(err)\n  }\n}\nexport const savePhoto = (file: File): ProfileThunkType => async(dispatch) => {\n  try {\n    let data = await profileAPI.savePhoto(file)\n    if(data.resultCode === 0) {\n    dispatch(ProfileActions.savePhotoSuccess(data.data.photos))\n    }\n  } catch(err) {\n    console.log(err)\n  }\n}\nexport const saveProfile = (profile: UserProfileType): ProfileThunkType => async(dispatch, getState: () => StateType) => {\n  const userId = getState().auth.userId\n  let data = await profileAPI.saveProfile(profile)\n  if(data.resultCode === 0) {\n      if(userId != null) {\n        dispatch(getProfile(userId))\n      } else {\n        throw new Error ('userID cannot be null')\n      } \n    } else {\n      dispatch(stopSubmit('edit-profile', {_error: data.messages[0] }))\n      return Promise.reject(data.messages[0])\n    }\n  }\n\n\n \n            \n","export default __webpack_public_path__ + \"static/media/userAvatar.7d923905.jpg\";","import { dialogsType, messagesType } from \"../types/types\";\nimport { InferActionsType } from \"./redux-store\";\n\nlet initialDialogsState = {\n    dialogsData: [\n      { id: 1, name: \"Chandler\" },\n      { id: 2, name: \"Monika\" },\n      { id: 3, name: \"Rachel\" },\n      { id: 4, name: \"Ross\" },\n      { id: 5, name: \"Joey\" },\n      { id: 6, name: \"Jennisse\" },\n      { id: 7, name: \"Phoebe\" },\n    ] as Array<dialogsType>,\n    messageData: [\n      { id: 1, message: \"Hi, whatsapp?\" },\n      { id: 2, message: \"Go to the cinema tonight?\" },\n      { id: 3, message: \"By the way, did you go to your aunt?\" },\n    ] as Array<messagesType>,\n}\n\nexport type InitialStateType = typeof initialDialogsState\nexport type DialogsActionsType = InferActionsType<typeof dialogsActions>\n\nexport const DialogsReducer = (state = initialDialogsState, action: DialogsActionsType): InitialStateType => {\n  switch(action.type) {  \n      case 'SEND_MESSAGE': {\n        let messageBody = action.newMessageTextBody;\n        return {\n          ...state,\n          messageData: [...state.messageData, {id: 6, message: messageBody}]\n        }\n      }\n      default: \n        return state;\n    }\n}\nexport const dialogsActions = {\n  sendMessage: (newMessageTextBody: string) => ({type: 'SEND_MESSAGE', newMessageTextBody} as const) \n}\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"App_Wrapper__2FdRQ\"};","import axios from 'axios'\n\nexport const instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': 'f4c1035b-af05-400d-b82f-113a377ae90b'\n    }\n})\n\nexport type apiResponseType<D = {}, RC = ResultCodeEnum> = {\n    resultCode: RC\n    messages: Array<string>\n    data: D\n}\n\nexport enum ResultCodeEnum {\n    success = 0,\n    error = 1,\n}\nexport enum CaptchaResultCodeEnum {\n    captchaIsRequired = 10\n}\n\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsEllipsis\":\"Preloader_ldsEllipsis__1KStL\",\"ldsEllipsis1\":\"Preloader_ldsEllipsis1__2JXfA\",\"ldsEllipsis2\":\"Preloader_ldsEllipsis2__o6Dlg\",\"ldsEllipsis3\":\"Preloader_ldsEllipsis3__yGc4W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navbar\":\"Navbar_Navbar__hQ4fJ\",\"link\":\"Navbar_link__2coYz\",\"active\":\"Navbar_active__3crz4\"};","import React from 'react'\nimport { Field,  WrappedFieldProps } from 'redux-form'\nimport { FieldValidatorType } from '../../../redux/handlers/validators/validators'\nimport style from '../../../styles/formControls.module.scss'\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\n\ntype formProps = {\n    meta: WrappedFieldMetaProps\n   \n}\nexport type getStringKeys<T>  = Extract<keyof T, string>\n\nexport function createField<FormKeysType extends string>( \n        placeholder: string | undefined, \n        name: FormKeysType, \n        component: React.FC<WrappedFieldProps>, \n        validators: Array<FieldValidatorType>, \n        props = {}, text = \"\") {\n    return (\n    <div>\n        <Field \n            placeholder={placeholder} \n            name={name} \n            component={component} \n            validate={validators}\n            {...props}  \n            /> {text}\n    </div>\n    )\n}\n\n\nconst FormControl: React.FC<formProps> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error\n    return (\n        <div className={ hasError ? style.error : style.formControl}>\n            <div>\n                <div>\n                    {children}\n                </div>\n               {hasError && <span>{error}</span>}\n            </div>\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props\n   return <FormControl {...props}>\n       <textarea {...input} {...restProps}/>\n    </FormControl>   \n}\n\n\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props\n    return <FormControl {...props}>\n        <input {...input} {...restProps} />\n    </FormControl>\n}","import React from 'react';\nimport style from '../../styles/Navbar.module.css';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navbar = React.memo(() => {\n    return (\n        <div className={style.Navbar}>\n            <div className={style.link}>\n                <NavLink to='/profile' activeClassName={style.active}>Profile</NavLink>\n            </div>\n            <div className={style.link}>\n                <NavLink to='/dialogs' activeClassName={style.active}>Dialogs</NavLink>\n            </div>\n           <div className={style.link}>\n               <NavLink  to='/friends' activeClassName={style.active}>Friends</NavLink >\n            </div>\n            <div className={style.link}>\n               <NavLink  to='/users' activeClassName={style.active}>Users</NavLink >\n            </div>\n           <div className={style.link}>\n               <NavLink  to='/music' activeClassName={style.active}>Music</NavLink >\n            </div>\n           <div className={style.link}>\n               <NavLink to='/photos' activeClassName={style.active}>Photos</NavLink >\n            </div>\n           <div className={style.link}>\n               <NavLink  to='/settings' activeClassName={style.active}>Settings</NavLink >\n            </div>\n            <div className={style.chat}>\n               <NavLink  to='/chat' activeClassName={style.active}>Chat</NavLink >\n            </div>\n        </div>\n    )\n})\n","import React from 'react'\n\nexport const Friends = React.memo(() => {\n    return (\n        <div>\n            Friends\n        </div>\n    )\n})\n","import React from 'react';\nimport style from '../../styles/Music.module.css'\n\nexport const Music = React.memo(() => {\n    return (\n        <div className={style.Music}>\n            Music\n        </div>\n    )\n})\n","import React from 'react';\nimport style from '../../styles/Photos.module.css';\n\nexport const Photos = React.memo(() => {\n    return (\n        <div className={style.Photos}>\n          Photos  \n        </div>\n    )\n})\n","import React from 'react';\nimport style from '../../styles/Settings.module.css'\n\nexport const Settings = React.memo(() => {\n    return (\n        <div className={style.Settings}>\n            settings\n        </div>\n    )\n})\n","import React, { useState } from 'react'\nimport style from '../../../styles/paginator.module.css'\nimport cn from 'classnames'\n\n\ntype paginatorProps = {\n    onPageChanged: (pageNumber: number) => void\n    currentPage: number\n    totalItemsCount: number \n    pageSize: number\n    portionSize?: number\n}\n\nexport const Paginator: React.FC<paginatorProps> = (\n    {onPageChanged, currentPage, totalItemsCount, pageSize, portionSize = 10}) => {\n    \n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\n   \n    let pages: Array<number> = []\n    for (let i = 1; i <= pagesCount; i ++ ) {\n        pages.push(i);\n    }\n    const portionCount = Math.ceil(pagesCount / portionSize);\n    const [portionNumber, setPortionNumber] = useState(1);\n    const leftPortionSizeNumber = (portionNumber - 1) * portionSize + 1;\n    const rightPortionSizeNumber = (portionNumber * portionSize)\n    \n    return (\n       \n        <div className={cn(style.paginatorStyle)}>\n            \n            {portionNumber > 1 && \n            <button onClick={() => {setPortionNumber(portionNumber - 1)}}>Previous</button>}\n                    {pages\n                        .filter(p => p >= leftPortionSizeNumber && p <= rightPortionSizeNumber)\n                        .map((p) => {\n                            return  <span className={cn({\n                                [style.selectedPage] : currentPage === p \n                            },  style.pageNumber)}\n                                key={p}\n                                onClick={(e) => {onPageChanged(p)}}>\n                                {p}\n                            </span>\n                            })}\n                    {portionCount > portionNumber && \n                        <button onClick={() => {setPortionNumber(portionNumber + 1)}}>Next</button>}\n        </div>\n    )\n}\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport style from '../../styles/Users.module.css'\nimport userAvatar from '../../assets/images/userAvatar.jpg'\nimport { UserType } from '../../types/types'\n\n\ntype userTypeProps = {\n    user: UserType\n    followingInProgress: number[]\n    followUser: (userId: number) => void\n    unfollowUser: (userId: number) => void\n   \n}\n\nexport const User: React.FC<userTypeProps> = React.memo(({user, followingInProgress, followUser, unfollowUser}) => {\n    return (\n        <div>\n           <span>\n                <div>\n                    <NavLink to={'/profile/' + user.id}>\n                        <img alt=\"user-avatar\" className={style.img} src={user.photos.small != null ? user.photos.small : userAvatar}/>\n                    </NavLink>\n                        </div>\n                            <div>\n                                {\n                                    user.followed \n                                    ? <button disabled={followingInProgress.some(id => id === user.id)} \n                                        onClick = {() => unfollowUser(user.id)}>Delete</button>\n                                    : <button disabled={followingInProgress.some(id => id === user.id)} \n                                        onClick={() => followUser(user.id)}>Add</button> \n                                }\n                            </div>\n                </span>\n                    <span>\n                        <div>\n                            <div>{user.name}</div>\n                            <div>{user.status}</div>\n                        </div>\n                            <div>{'u.location.country'}</div>\n                            <div>{'u.location.city'}</div>\n                    </span>\n            </div>\n    )\n})\n","import { StateType } from './redux-store';\nimport {createSelector} from 'reselect'\n\nexport const getAllUsers = (state: StateType) => {\n    return state.usersPage.users\n};\nexport const getAllUsersSelector = createSelector(getAllUsers, \n    (users) => {return users.filter(u => true)\n});\n\n\nexport const getPageSize = (state: StateType) => {\n    return state.usersPage.pageSize\n};\nexport const getTotalUsersCount = (state: StateType) => {\n    return state.usersPage.totalCount\n};\nexport const getCurrentPage = (state: StateType) => {\n    return state.usersPage.currentPage\n};\nexport const getFetching = (state: StateType) => {\n    return state.usersPage.isFetching\n};\nexport const getFollowingProgress = (state: StateType) => {\n    return state.usersPage.followingInProgress\n};\nexport const getUsersFilter = (state: StateType) => {\n    return state.usersPage.filter\n}","import { UserType } from \"../../../types/types\";\n\nexport const updateObjectInArray = (items: UserType[], itemID: number, objPropName: string, newObjProps: {followed: boolean}) => {\n    return items.map((u: any )=> {\n        if (u[objPropName] === itemID) {\n            return {...u, ...newObjProps}\n        }\n        return u;\n    })\n} \n","import { UserType } from \"../types/types\";\nimport { apiResponseType, instance } from \"./api\";\n\ntype getUsersResponseType = {\n    items: UserType[]\n    totalCount: number\n    error: string | null\n}\nexport const usersAPI = {\n    getUsers(currentPage = 1 , pageSize = 10, term = '', friend: null | boolean = null) {\n     return instance.get<getUsersResponseType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + \n        (friend === null ? '' : `&friend=${friend}`)).then(res => res.data)\n   },\n    follow(userId: number) {\n       return instance.post<apiResponseType>(`follow/${userId}`).then(res => res.data) \n   },\n   unfollow(userId: number) {\n       return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<apiResponseType>\n   }\n}","import { InferActionsType, BaseThunkType } from './redux-store';\nimport { Dispatch } from 'redux';\nimport { updateObjectInArray } from './handlers/validators/objects-helpers';\nimport { UserType } from '../types/types';\nimport { usersAPI } from '../api/users-api';\nimport { apiResponseType } from '../api/api';\n\n\nexport const InitialUsersState = {\n    users: [] as Array<UserType>,\n    pageSize: 10,\n    totalCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [] as Array<number>,   //array of user's id\n    filter: {\n        term: '', \n        friend: null as null | boolean\n    }\n}\n\nexport type InitialUsersStateType = typeof InitialUsersState\n\nexport const UsersReducer = (state = InitialUsersState , action: UsersActionsType): InitialUsersStateType => {\n    switch(action.type) {\n        case 'FOLLOW_USER': {\n            return  {\n                ...state, \n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\n            }\n        }\n        case 'DELETE_USER': {\n           return  {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\n            } \n        }\n        case 'SET_USERS': {\n            return {\n                ...state, \n                users: action.users   \n            }\n        }\n        case 'SET_CURRENT_PAGE': {\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n        }\n        case 'SET_TOTAL_USERS_COUNT': {\n            return {\n                 ...state,\n                totalCount: action.totalCount\n           }\n        }\n        case 'SET_PRELOADER': {\n            return {\n                ...state,\n                isFetching: action.isFetching\n            }\n        }\n        case 'FOLLOWING_IN_PROGRESS': {\n            return {\n                ...state, \n                followingInProgress: action.isFetching \n                ? [...state.followingInProgress, action.userId]\n                : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        }\n        case 'SET_TERM_FILTER': {\n            return {\n                ...state,\n                filter: action.payload.filter,\n                \n            }\n        }\n        default: \n            return state;\n    }\n}\n\n//-- action creators ---\nexport const actions = {\n    deleteUser:  (userId: number) => ({type: 'DELETE_USER', userId} as const),\n    followUser:  (userId: number) => ({type: 'FOLLOW_USER', userId} as const),\n    setUsers: (users: Array<UserType>) => ({type: 'SET_USERS', users} as const), \n    setCurrentPage:  (currentPage: number) => ({type: 'SET_CURRENT_PAGE', currentPage} as const),\n    setTotalUsersCount: (totalCount: number) => ({type: 'SET_TOTAL_USERS_COUNT',  totalCount} as const),\n    setPreloader: (isFetching: boolean) => ({type: 'SET_PRELOADER', isFetching} as const),\n    setFollowingInProgress: (isFetching: boolean, userId: number ) => ({type: 'FOLLOWING_IN_PROGRESS', userId, isFetching} as const),\n    setTerm: (filter: FilterType) => ({type: 'SET_TERM_FILTER', payload: {filter}} as const)\n}\n\n//----------getUsers, followUser, unfollowUser  это санка-------------------------\ntype UsersThunksType = BaseThunkType<UsersActionsType> \ntype UsersActionsType = InferActionsType<typeof actions>\nexport type FilterType = typeof InitialUsersState.filter\n\nexport const requestUsers = (currentPage: number, pageSize: number, filter: FilterType ): UsersThunksType => {\n    return async(dispatch, getState) => {\n        dispatch(actions.setPreloader(true))\n        dispatch(actions.setCurrentPage(currentPage))\n        dispatch(actions.setTerm(filter))\n\n        let data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend)\n        dispatch(actions.setPreloader(false))\n        dispatch(actions.setUsers(data.items))\n        dispatch(actions.setTotalUsersCount(data.totalCount))\n}}\n\nconst _followUnfollowFlow = async (dispatch: Dispatch<UsersActionsType>, \n        userId: number, \n        apiMethod: (userId: number) => Promise<apiResponseType>,\n        actionCreator: (userId: number) => UsersActionsType) => {\n            dispatch(actions.setFollowingInProgress(true, userId))\n            let response = await apiMethod(userId)\n        \n            if (response.resultCode === 0) {\n                dispatch(actionCreator(userId))\n            \n            dispatch(actions.setFollowingInProgress(false, userId))\n        } \n}\n\nexport const unfollowUser = (userId: number): UsersThunksType => {\n    return async(dispatch) => { \n       await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.deleteUser)           \n    }\n}\n \nexport const follow = (userId: number): UsersThunksType => {\n    return async(dispatch) => {   \n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followUser)\n    }\n} \n\n\n","import {  Field, Form, Formik } from 'formik';\nimport React from 'react'\nimport { FilterType } from '../../../redux/users-reducer';\n  \ntype usersSearchFormPropsType = {\n    onFilterChanged: (filter: FilterType) => void\n}\ntype formPropsType = {\n    term: string,\n    friend: 'null' | 'true' | 'false'\n}\nconst searchValidate = (values: any) => {\n    const errors = {};\n    return errors;\n}\n\nexport const UserSearchForm: React.FC<usersSearchFormPropsType> = (props) => {\n  \n    const formSubmitHandler = (values: formPropsType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\n        const filter: FilterType = {\n            term: values.term,\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\n        }\n        props.onFilterChanged(filter)\n        setSubmitting(false)\n    }\n    return (\n        <div>\n        <Formik\n            initialValues={{ term: '' , friend: 'null'}}\n            validate={searchValidate}\n            onSubmit={formSubmitHandler}\n        >\n       {({ isSubmitting }) => (\n         <Form>\n           <Field type=\"text\" name=\"term\" />\n            <Field name='friend' as='select' placeholder='Choose user'>\n                <option value='null'>All users</option>\n                <option value='true'>Followed users</option>\n                <option value='false'>Unfollowed users</option>\n            </Field>\n           <button type=\"submit\" disabled={isSubmitting}>\n             Submit\n           </button>\n         </Form>\n       )}\n     </Formik>\n        </div>\n    )\n}\n","import React, { useEffect }  from 'react'\nimport { Paginator } from '../common/Paginator/Paginator'\nimport { User } from './User'\nimport {getAllUsers, \n        getPageSize, getTotalUsersCount, \n        getCurrentPage, getFollowingProgress, getUsersFilter} \nfrom '../../redux/users-selectors'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { FilterType, follow, requestUsers, unfollowUser } from '../../redux/users-reducer'\nimport { UserSearchForm } from '../common/SearchForm/UserSearchForm'\n\n\nexport const Users: React.FC = React.memo(() => {\n    \n    const users = useSelector(getAllUsers)\n    const totalUsersCount = useSelector(getTotalUsersCount)\n    const pageSize = useSelector(getPageSize)\n    const currentPage = useSelector(getCurrentPage)\n    const followingInProgress = useSelector(getFollowingProgress)\n    const filter = useSelector(getUsersFilter)\n    \n    useEffect(() => {\n       dispatch(requestUsers(currentPage, pageSize, filter))\n    }, [currentPage, pageSize, filter])\n    \n    const dispatch = useDispatch()\n    \n    const followUserHandler = (userId: number) => {\n        dispatch(follow(userId))\n    }\n    const unfollowUserHandler = (userId: number) => {\n        dispatch(unfollowUser(userId))\n    }\n    const onPageChanged = (pageNumber: number) => {\n        dispatch(requestUsers(pageNumber, pageSize, filter))\n    }\n    const onFilterChanged = (filter: FilterType) => {\n        dispatch(requestUsers(1, pageSize, filter))\n    }\n    return (\n        <div>\n            <div> \n                <UserSearchForm onFilterChanged={onFilterChanged}/>\n            </div>\n            <Paginator \n                onPageChanged={onPageChanged} \n                currentPage={currentPage} \n                pageSize={pageSize} \n                totalItemsCount={totalUsersCount}\n                /> \n            <div>\n                {\n                   users.map(u =>\n                     <User \n                        key={u.id}  \n                        followingInProgress={followingInProgress} \n                        followUser={followUserHandler}\n                        unfollowUser={unfollowUserHandler}\n                        user={u}\n                        />\n                    )\n                }\n                </div>\n             </div>\n    )\n})\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Users } from './Users'\nimport { Preloader } from '../common/Preloader/Preloader'\nimport {  getFetching} from '../../redux/users-selectors'\n\n\n\nexport const UsersPage = () => {\n    const isFetching = useSelector(getFetching)\n    return (\n        <div>\n            {isFetching ? <Preloader/> : null}\n            <Users  />  \n        </div> \n    )\n}\n\n   \n\n","import { CaptchaResultCodeEnum, ResultCodeEnum, instance, apiResponseType } from \"./api\"\n\ntype authMeResponseType = {\n    id: number,\n    login: string,\n    email: string\n}\ntype loginResponseType = {\n   id: number\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get<apiResponseType<authMeResponseType>>(`auth/me`).then(res => res.data)\n    },\n    login(email: string, password: string, rememberMe: boolean, captcha: null | string = null) {\n        return instance.post<apiResponseType<loginResponseType, CaptchaResultCodeEnum | ResultCodeEnum>>('auth/login', \n            { email, password, rememberMe, captcha }).then(res => res.data)\n    },\n    logout() {\n        return instance.delete('auth/login')\n    }\n}","import { instance } from \"./api\"\n\ntype getCaptchaUrlResponseType = {\n    url: string\n}\n\nexport const securityAPI = {\n    captcha() {\n        return instance.get<getCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\n    }\n}","import {  CaptchaResultCodeEnum, ResultCodeEnum } from './../api/api'\nimport { BaseThunkType, InferActionsType } from \"./redux-store\"\nimport { FormAction, stopSubmit } from \"redux-form\"\nimport { authAPI } from '../api/auth-api'\nimport { Dispatch } from 'redux'\nimport { securityAPI } from '../api/captcha-api'\n\nexport let initialDataState = {\n    userId: null as number | null,\n    email: null as string | null,\n    login: null as string | null,\n    isFetching: true,\n    isAuth: false,\n    captchaURL: null as string | null,\n}\nexport type initialDataStateType = typeof initialDataState\n\nexport type setAuthDataACPayloadType = {\n  userId: number | null\n  email: string | null\n  login: string | null\n  isAuth: boolean\n};\n\n\n\nexport const authReducer = ( state = initialDataState, action: AuthActionsType): initialDataStateType => {\n  switch (action.type) {\n    case 'SET_USER_DATA':\n      case 'GET_CAPTCHA_URL': {\n      return {\n        ...state,\n        ...action.payload,\n      }\n    }\n    default: {\n      return state\n    }\n  }\n};\n\nexport const authActions = {\n  setAuthData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => \n  ({type: 'SET_USER_DATA',payload: { userId, email, login, isAuth }, } as const),\n  getCaptchaURL: (url: string) => ({type: 'GET_CAPTCHA_URL', payload: {url}} as const)\n}\n\ntype AuthThunkType = BaseThunkType<AuthActionsType | FormAction >\ntype AuthActionsType = InferActionsType<typeof authActions>\n\nexport const authData = (): AuthThunkType => async(dispatch) => {\n    let meData = await authAPI.me()\n    if (meData.resultCode === ResultCodeEnum.success) {\n      let { id, login, email,  } = meData.data;\n      dispatch(authActions.setAuthData(id, email, login,  true))\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): AuthThunkType => async(dispatch) => {\n  let loginData = await authAPI.login(email, password, rememberMe, captcha);\n    if (loginData.resultCode === ResultCodeEnum.success) {\n      dispatch(authData());\n    } else {\n      if (loginData.resultCode === CaptchaResultCodeEnum.captchaIsRequired) {\n        dispatch(getCaptcha())\n      }\n      let message = loginData.messages.length > 0 ? loginData.messages[0] : \"Some error occured\";\n      dispatch(stopSubmit(\"login\", { _error: message }));\n    }\n};\n\nexport const logout = (): AuthThunkType => async(dispatch: Dispatch) => {\n   let response = await authAPI.logout()\n      if (response.data.resultCode === 0) {\n        dispatch(authActions.setAuthData(null, null, null, false));\n    }\n}\nexport const getCaptcha = (): AuthThunkType => async(dispatch) => {\n  const data = await securityAPI.captcha()\n  const captchaURL = data.url\n  dispatch(authActions.getCaptchaURL(captchaURL))\n}","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { reduxForm, InjectedFormProps } from 'redux-form'\nimport { required } from '../../redux/handlers/validators/validators'\nimport { createField, Input } from '../common/FormControl/FormControls'\nimport { login } from '../../redux/auth-reducer'\nimport { Redirect } from 'react-router'\nimport { StateType } from '../../redux/redux-store'\nimport style from '../../styles/formControls.module.scss'\n\ntype FormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean \n    captcha: string \n}\n\ntype captchaProps = {\n    captcha: string | null\n}\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, captchaProps> & captchaProps> = ({handleSubmit, error, captcha}) => {\n   return (\n    <form onSubmit={handleSubmit}>\n        {createField<LoginFormValuesTypeKeys>('Email', 'email', Input, [required])}\n        {createField<LoginFormValuesTypeKeys>('Password', 'password', Input, [required], {type: 'password'})}\n        {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', Input, [], {type: 'checkbox'}, 'remember me' )}\n     {error && <div className={style.formErrorEmail}>\n            {error}\n        </div>\n    }\n    {captcha && <img src={captcha} alt='captchaImage'/>}\n    {captcha && createField('Symbols from image', 'captcha', Input, [required])}\n    <div>\n        <button>Login</button>\n    </div>\n</form>\n   )\n}\n\n//---------- This is \"HOC\" for form -------------------------\nconst LoginReduxForm  = reduxForm<FormDataType, captchaProps>({form: 'login'})(LoginForm)\ntype LoginFormValuesTypeKeys = Extract<keyof FormDataType, string>\n\n\nexport const LoginPage: React.FC = () => {\n  \n    const captcha = useSelector((state: StateType) => state.auth.captchaURL)\n    const isAuth = useSelector((state: StateType) => state.auth.isAuth)\n    const dispatch = useDispatch()\n    \n  const onSubmit = (formData: FormDataType) => {\n      dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\n    }\n    \n    if(isAuth) {\n        return <Redirect to='/profile'/> \n    }\n\n    return (\n        <div>\n           <div>\n               <h1>Login</h1>\n                 <LoginReduxForm onSubmit={onSubmit} captcha={captcha} />\n            </div> \n        </div>\n    )\n}\n\n","import { InferActionsType, StateType } from './redux-store';\nimport { ThunkAction } from 'redux-thunk';\nimport { authData } from './auth-reducer';\n\n\nexport let initialAppState = {\n    initilized: false,\n    globalerror: null\n};\nexport type initialAppStateType = typeof initialAppState\n\nexport const appReducer = (state = initialAppState, action: appActionsType): initialAppStateType => {\n    switch(action.type) {\n        case 'INITILIZED_SUCCESS':\n            return {\n                ...state,\n                initilized: true,\n            }\n        default: {\n            return state;\n        }\n    }\n};\n\n\n//---action creator----//\nexport const appActions = {\n    setInitilized: () => ({type: 'INITILIZED_SUCCESS'} as const)\n}\nexport type appActionsType = InferActionsType<typeof appActions>;\n\n//----type for thunk---//\ntype appThunkType = ThunkAction<void, StateType, unknown, appActionsType>\n\n//--- redux - thunk ----//\nexport const initilizedAppThunk = (): appThunkType => {\n    return (dispatch) => {\n        let promise = dispatch(authData())\n        Promise.all([promise]).then(() => {\n            dispatch(appActions.setInitilized)\n        })\n    }\n}\n\n","\nlet initialNavbarState = {}\n\nexport const  NavbarReducer = (state = initialNavbarState, action: any) => {\n    return state;\n}\n","import { appReducer } from './app-reducer';\nimport { UsersReducer } from './users-reducer';\nimport { applyMiddleware, combineReducers, createStore, compose, Action } from 'redux'\nimport {ProfileReducer} from './profile-reducer'\nimport {DialogsReducer} from './dialogs-reducer'\nimport {NavbarReducer} from './navbar-reducer'\nimport { authReducer } from './auth-reducer'\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk'\nimport { reducer as formReducer } from 'redux-form'\n\n\n\nconst reducers = combineReducers({\n    profilePage: ProfileReducer,\n    dialogsPage: DialogsReducer,\n    navbar: NavbarReducer,\n    usersPage:  UsersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer,\n})\n\nexport type StateType = ReturnType<typeof reducers>\ntype PropertiesTypes <T> = T extends {[key: string]: infer U} ? U : never\nexport type InferActionsType <T extends {[key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, StateType, unknown, A>\n\n//@ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nlet store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\n\n//@ts-ignore\nwindow.__store__ = store;\n\nexport default store;\n","import React from 'react'\n\nexport function WithSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>)  {\n    return (props: WCP) => {\n        return <React.Suspense fallback={<div>Loading...</div>}>\n            <WrappedComponent {...props}/>\n        </React.Suspense>\n        \n    }\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { NavLink } from 'react-router-dom'\nimport { logout } from '../../redux/auth-reducer'\nimport { StateType } from '../../redux/redux-store'\nimport style from '../../styles/Header.module.css' \n\n\nexport const Header = () => {\n    const isAuth = useSelector((state: StateType) => state.auth.isAuth)\n    const login = useSelector((state: StateType) => state.auth.login)\n    const dispatch = useDispatch()\n    \n    const logoutHandler = () => {\n    dispatch(logout())\n    }\n\n    return (\n        <div className={style.header}>\n           <div className={style.links}>\n           <div className={style.login}>\n               {\n                isAuth \n                ? <div>{login } <button className={style.logoutButton} onClick={logoutHandler}>Log Out</button></div>\n                : <NavLink to={'/login'} activeClassName={style.active}>Login</NavLink>}\n            </div>\n            <div className={style.signInLink}>\n            <NavLink to={'/registration'} activeClassName={style.active}>Sign In</NavLink>\n            </div>\n           </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport classes from './App.module.css';\nimport { Navbar } from './components/Navbar/Navbar';\nimport {  HashRouter, Redirect, Route, Switch, withRouter } from 'react-router-dom';\nimport { Friends } from './components/Friends/Friends';\nimport { Music } from './components/Music/Music';\nimport { Photos } from './components/Photos/Photos'\nimport { Settings } from './components/Settings/Settings';\nimport {UsersPage}  from './components/Users/UsersContainer'\nimport {LoginPage} from './components/Login/Login'\nimport {initilizedAppThunk} from '../src/redux/app-reducer'\nimport { connect, Provider, useDispatch, useSelector } from 'react-redux';\nimport { compose } from 'redux';\nimport { Preloader } from './components/common/Preloader/Preloader';\nimport { useEffect } from 'react';\nimport store, { StateType } from './redux/redux-store';\nimport { WithSuspense } from './hoc/WithSuspense';\nimport { Header } from './components/Header/Header';\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\nconst ChatPage = React.lazy(() => import('./pages/Chat/ChatPage')) \n\n\nexport const App = () => {\n  const initialized = useSelector((state: StateType) => state.app.initilized)\n  const dispatch = useDispatch()\n  \n  useEffect(() => {\n    dispatch(initilizedAppThunk())\n  }, [dispatch])\n\n    if (initialized) {\n      return <Preloader/>\n    }\n    const SuspendedDialogs = WithSuspense(DialogsContainer)\n    const SuspendedProfile = WithSuspense(ProfileContainer)\n    const SuspendedChat = WithSuspense(ChatPage)\n\n    return (\n        <div>\n          <div className={classes.Wrapper}>\n            <Header />\n            <Switch>\n            <Redirect exact from='/' to='profile' />\n            <Route path=\"/dialogs\" render={() => <SuspendedDialogs/>} />\n            <Route path=\"/profile/:userId?\" render={() => <SuspendedProfile/>} />\n            <Route path=\"/friends\" render={() => <Friends />} />\n            <Route path=\"/users\" render={() => <UsersPage />} />\n            <Route path=\"/music\" render={() => <Music />} />\n            <Route path=\"/photos\" render={() => <Photos />} />\n            <Route path=\"/settings\" render={() => <Settings />} />\n            <Route path=\"/login\" render={() => <LoginPage />} />\n            <Route path=\"/chat\" render={() => <SuspendedChat />} />\n            </Switch>\n            <Navbar />\n          </div>\n        </div>\n    );\n  }\n\n\n\nexport const AppContainer = compose<React.ComponentType>(connect(null, {initilizedAppThunk}), withRouter)(App);\n\nexport const SamuraiJSApp = () => {\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n       <AppContainer /> \n      </Provider>\n      </HashRouter>\n  )\n}","import './index.css';\nimport React from 'react'\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { SamuraiJSApp } from \"./App\";\n\n  ReactDOM.render(\n    <SamuraiJSApp/>\n      ,document.getElementById(\"root\")\n  );\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1fnJb\",\"links\":\"Header_links__1P9Ts\",\"active\":\"Header_active__3O2Zj\",\"login\":\"Header_login__252x2\",\"logoutButton\":\"Header_logoutButton__12E6s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"formControls_error__iknAJ\",\"formErrorEmail\":\"formControls_formErrorEmail__2Vwpj\"};","import React from 'react'\nimport style from '../../../styles/Preloader.module.css'\n\nexport const Preloader = React.memo(() => {\n    return (\n        <div>\n            <div className={style.ldsEllipsis}><div></div><div></div><div></div><div></div></div>\n        </div>\n    )\n})\n","\nexport type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value) => {\n    if(value) return undefined;\n    return 'Field is required';\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if(value.length > maxLength ) return `Text can be ${maxLength} symbols only`\n    return undefined\n}\n\nexport const minLengthCreator = (minLength: number): FieldValidatorType => (value) => {\n    if (value.length < minLength) return `Text should be more than ${minLength} symbols`\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginatorStyle\":\"paginator_paginatorStyle__3qE5z\",\"pageNumber\":\"paginator_pageNumber__2w5Xh\",\"selectedPage\":\"paginator_selectedPage__2mHiO\"};"],"sourceRoot":""}